{
  "api/Bonsai.ML.CreateModelReference.html": {
    "href": "api/Bonsai.ML.CreateModelReference.html",
    "title": "Class CreateModelReference | Bonsai.ML",
    "keywords": "Class CreateModelReference Namespace Bonsai.ML Assembly Bonsai.ML.dll Represents an operator that creates a reference for a named model. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class CreateModelReference : INamedElement Inheritance object CreateModelReference Implements INamedElement Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Name Gets or sets the name of the model to reference. public string Name { get; set; } Property Value string Methods Process() Generates an observable sequence that contains the model reference object. public IObservable<ModelReference> Process() Returns IObservable<ModelReference> A sequence containing a single instance of the ModelReference class."
  },
  "api/Bonsai.ML.Data.ArrayHelper.html": {
    "href": "api/Bonsai.ML.Data.ArrayHelper.html",
    "title": "Class ArrayHelper | Bonsai.ML",
    "keywords": "Class ArrayHelper Namespace Bonsai.ML.Data Assembly Bonsai.ML.Data.dll Provides a set of static methods for working with arrays. public static class ArrayHelper Inheritance object ArrayHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ParseString(string, Type) Parses the input string into an object of the specified type. If the input is a JSON array, the method will attempt to parse it into a list or array of the specified type. public static object ParseString(string input, Type dtype) Parameters input string The string to parse. dtype Type The data type of the object. Returns object An object of the specified type containing the parsed data. ParseToken(JToken, Type) Parses the input token into an object of the specified type. If the input is a JSON array, the method will attempt to parse it into a list or array of the specified type. public static object ParseToken(JToken token, Type dtype) Parameters token JToken The token to parse. dtype Type The data type of the object. Returns object An object of the specified type containing the parsed data."
  },
  "api/Bonsai.ML.Data.html": {
    "href": "api/Bonsai.ML.Data.html",
    "title": "Namespace Bonsai.ML.Data | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.Data Classes ArrayHelper Provides a set of static methods for working with arrays."
  },
  "api/Bonsai.ML.Design.BarSeriesOxyPlotBase.html": {
    "href": "api/Bonsai.ML.Design.BarSeriesOxyPlotBase.html",
    "title": "Class BarSeriesOxyPlotBase | Bonsai.ML",
    "keywords": "Class BarSeriesOxyPlotBase Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Provides a user control to display data as a bar plot using OxyPlot. public class BarSeriesOxyPlotBase : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl BarSeriesOxyPlotBase Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(ref Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(bool) ContainerControl.Dispose(bool) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(ref Message, Keys) ContainerControl.ProcessMnemonic(char) ContainerControl.ProcessTabKey(bool) ContainerControl.Select(bool, bool) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(ref Message) Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.ProcessKeyPreview(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SetBoundsCore(int, int, int, int, BoundsSpecified) Control.SetClientSizeCore(int, int) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.SetVisibleCore(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors BarSeriesOxyPlotBase() Initializes a new instance of the BarSeriesOxyPlotBase class public BarSeriesOxyPlotBase() Properties Capacity Gets or sets the integer value that determines how many data points should be shown along the x axis. public int Capacity { get; set; } Property Value int StatusStrip Gets the status strip control. public StatusStrip StatusStrip { get; } Property Value StatusStrip XAxis Gets the X Axis. public Axis XAxis { get; } Property Value Axis YAxis Gets the Y Axis. public Axis YAxis { get; } Property Value Axis Methods AddBarItemToBarSeries(BarSeries, BarItem) Method to add bar item to a bar series. Requires the bar item and bar series. public void AddBarItemToBarSeries(BarSeries barSeries, BarItem barItem) Parameters barSeries BarSeries barItem BarItem AddNewBarSeries(string, OxyColor?, OxyColor?) Method to add a new bar series to the data plot. Requires a string for the name of the bar series Fill color of the bar series is optional. public BarSeries AddNewBarSeries(string barSeriesName, OxyColor? fillColor = null, OxyColor? strokeColor = null) Parameters barSeriesName string fillColor OxyColor? strokeColor OxyColor? Returns BarSeries AddNewErrorBarSeries(string, OxyColor?, OxyColor?) Method to add a new bar series to the data plot. Requires a string for the name of the bar series Fill color of the bar series is optional. public ErrorBarSeries AddNewErrorBarSeries(string barSeriesName, OxyColor? fillColor = null, OxyColor? strokeColor = null) Parameters barSeriesName string fillColor OxyColor? strokeColor OxyColor? Returns ErrorBarSeries AddSeriesToModel(Series) Method to add a series to the plot model. Requires the series. public void AddSeriesToModel(Series series) Parameters series Series AddValueAndErrorToBarSeries(BarSeries, double, double, OxyColor?) Method to add value with error to a bar series. Requires the bar series, value, and error. public void AddValueAndErrorToBarSeries(BarSeries barSeries, double value, double error, OxyColor? fillColor = null) Parameters barSeries BarSeries value double error double fillColor OxyColor? AddValueAndErrorToBarSeries(BarSeries, int, double, double, OxyColor?) Method to add value with error to a bar series. Requires the bar series, value, and error. public void AddValueAndErrorToBarSeries(BarSeries barSeries, int index, double value, double error, OxyColor? fillColor = null) Parameters barSeries BarSeries index int value double error double fillColor OxyColor? AddValueToBarSeries(BarSeries, double, OxyColor?) Method to add a value to a bar series. Requires the bar series and value. public void AddValueToBarSeries(BarSeries barSeries, double value, OxyColor? fillColor = null) Parameters barSeries BarSeries value double fillColor OxyColor? AddValueToBarSeries(BarSeries, int, double, OxyColor?) Method to add a value to a bar series. Requires the bar series and value. public void AddValueToBarSeries(BarSeries barSeries, int index, double value, OxyColor? fillColor = null) Parameters barSeries BarSeries index int value double fillColor OxyColor? ResetAxes() Method to reset the x and y axes to their default. public void ResetAxes() ResetBarSeries(BarSeries) Method to reset the bar series. public void ResetBarSeries(BarSeries barSeries) Parameters barSeries BarSeries ResetModelSeries() Method to reset all series in the current PlotModel. public void ResetModelSeries() SetAxes(double, double) Set the minimum and maximum values to show along the y axis. Requires the minValue and maxValue. public void SetAxes(double minValue, double maxValue) Parameters minValue double maxValue double UpdatePlot() Method to update the plot. public void UpdatePlot()"
  },
  "api/Bonsai.ML.Design.EllipseHelper.html": {
    "href": "api/Bonsai.ML.Design.EllipseHelper.html",
    "title": "Class EllipseHelper | Bonsai.ML",
    "keywords": "Class EllipseHelper Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Provides helper methods to compute ellipse parameters from a covariance matrix. public static class EllipseHelper Inheritance object EllipseHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetEllipseParameters(double, double, double) Computes the ellipse parameters from the specified covariance matrix. public static EllipseParameters GetEllipseParameters(double xVar, double yVar, double xyCov) Parameters xVar double The variance of the x axis. yVar double The variance of the y axis. xyCov double The covariance between the x and y axes. Returns EllipseParameters"
  },
  "api/Bonsai.ML.Design.EllipseParameters.html": {
    "href": "api/Bonsai.ML.Design.EllipseParameters.html",
    "title": "Class EllipseParameters | Bonsai.ML",
    "keywords": "Class EllipseParameters Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Represents the parameters of an ellipse. public class EllipseParameters Inheritance object EllipseParameters Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Angle Gets or sets the angle of the ellipse. public double Angle { get; set; } Property Value double MajorAxis Gets or sets the major axis of the ellipse. public double MajorAxis { get; set; } Property Value double MinorAxis Gets or sets the minor axis of the ellipse. public double MinorAxis { get; set; } Property Value double"
  },
  "api/Bonsai.ML.Design.HeatMapSeriesOxyPlotBase.html": {
    "href": "api/Bonsai.ML.Design.HeatMapSeriesOxyPlotBase.html",
    "title": "Class HeatMapSeriesOxyPlotBase | Bonsai.ML",
    "keywords": "Class HeatMapSeriesOxyPlotBase Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Provides a user control to display 2D data as a heatmap using OxyPlot. public class HeatMapSeriesOxyPlotBase : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl HeatMapSeriesOxyPlotBase Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(ref Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(bool) ContainerControl.Dispose(bool) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(ref Message, Keys) ContainerControl.ProcessMnemonic(char) ContainerControl.ProcessTabKey(bool) ContainerControl.Select(bool, bool) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(ref Message) Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.ProcessKeyPreview(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SetBoundsCore(int, int, int, int, BoundsSpecified) Control.SetClientSizeCore(int, int) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.SetVisibleCore(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors HeatMapSeriesOxyPlotBase(int, int, int) Constructor of the TimeSeriesOxyPlotBase class. Requires a line series name and an area series name. Data source is optional, since pasing it to the constructor will populate the combobox and leave it empty otherwise. The selected index is only needed when the data source is provided. public HeatMapSeriesOxyPlotBase(int paletteSelectedIndex, int renderMethodSelectedIndex, int numColors = 100) Parameters paletteSelectedIndex int renderMethodSelectedIndex int numColors int Properties PaletteComboBox Gets the palette combobox. public ToolStripComboBox PaletteComboBox { get; } Property Value ToolStripComboBox RenderMethodComboBox Gets the render method combobox. public ToolStripComboBox RenderMethodComboBox { get; } Property Value ToolStripComboBox StatusStrip Gets the status strip control. public StatusStrip StatusStrip { get; } Property Value StatusStrip Methods UpdateHeatMapSeries(double, double, double, double, double[,]) Method to update the heatmap series with new data. public void UpdateHeatMapSeries(double x0, double x1, double y0, double y1, double[,] data) Parameters x0 double The minimum x value. x1 double The maximum x value. y0 double The minimum y value. y1 double The maximum y value. data double[,] The data to be displayed. UpdateHeatMapSeries(double[,]) Method to update the heatmap series with new data. public void UpdateHeatMapSeries(double[,] data) Parameters data double[,] The data to be displayed. UpdatePlot() Method to update the plot. public void UpdatePlot() Events PaletteComboBoxValueChanged Event handler which can be used to hook into events generated when the combobox values have changed. public event EventHandler PaletteComboBoxValueChanged Event Type EventHandler RenderMethodComboBoxValueChanged Event handler which can be used to hook into events generated when the render method combobox values have changed. public event EventHandler RenderMethodComboBoxValueChanged Event Type EventHandler"
  },
  "api/Bonsai.ML.Design.MultidimensionalArrayVisualizer.html": {
    "href": "api/Bonsai.ML.Design.MultidimensionalArrayVisualizer.html",
    "title": "Class MultidimensionalArrayVisualizer | Bonsai.ML",
    "keywords": "Class MultidimensionalArrayVisualizer Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Provides a type visualizer to display multi dimensional array data as a heatmap. public class MultidimensionalArrayVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer MultidimensionalArrayVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PaletteSelectedIndex Gets or sets the selected index of the color palette to use. public int PaletteSelectedIndex { get; set; } Property Value int RenderMethodSelectedIndex Gets or sets the selected index of the render method to use. public int RenderMethodSelectedIndex { get; set; } Property Value int Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.Design.TimeSeriesOxyPlotBase.html": {
    "href": "api/Bonsai.ML.Design.TimeSeriesOxyPlotBase.html",
    "title": "Class TimeSeriesOxyPlotBase | Bonsai.ML",
    "keywords": "Class TimeSeriesOxyPlotBase Namespace Bonsai.ML.Design Assembly Bonsai.ML.Design.dll Provides a user control to display time series data using OxyPlot. public class TimeSeriesOxyPlotBase : UserControl, IDropTarget, ISynchronizeInvoke, IWin32Window, IBindableComponent, IComponent, IDisposable, IContainerControl Inheritance object MarshalByRefObject Component Control ScrollableControl ContainerControl UserControl TimeSeriesOxyPlotBase Implements IDropTarget ISynchronizeInvoke IWin32Window IBindableComponent IComponent IDisposable IContainerControl Inherited Members UserControl.ValidateChildren() UserControl.ValidateChildren(ValidationConstraints) UserControl.OnCreateControl() UserControl.OnLoad(EventArgs) UserControl.OnResize(EventArgs) UserControl.OnMouseDown(MouseEventArgs) UserControl.WndProc(ref Message) UserControl.AutoSize UserControl.AutoSizeMode UserControl.AutoValidate UserControl.BorderStyle UserControl.CreateParams UserControl.DefaultSize UserControl.AutoSizeChanged UserControl.AutoValidateChanged UserControl.Load ContainerControl.AdjustFormScrollbars(bool) ContainerControl.Dispose(bool) ContainerControl.OnAutoValidateChanged(EventArgs) ContainerControl.OnFontChanged(EventArgs) ContainerControl.OnLayout(LayoutEventArgs) ContainerControl.OnParentChanged(EventArgs) ContainerControl.PerformAutoScale() ContainerControl.ProcessDialogChar(char) ContainerControl.ProcessDialogKey(Keys) ContainerControl.ProcessCmdKey(ref Message, Keys) ContainerControl.ProcessMnemonic(char) ContainerControl.ProcessTabKey(bool) ContainerControl.Select(bool, bool) ContainerControl.UpdateDefaultButton() ContainerControl.Validate() ContainerControl.Validate(bool) ContainerControl.AutoScaleDimensions ContainerControl.AutoScaleFactor ContainerControl.AutoScaleMode ContainerControl.BindingContext ContainerControl.CanEnableIme ContainerControl.ActiveControl ContainerControl.CurrentAutoScaleDimensions ContainerControl.ParentForm ScrollableControl.ScrollStateAutoScrolling ScrollableControl.ScrollStateHScrollVisible ScrollableControl.ScrollStateVScrollVisible ScrollableControl.ScrollStateUserHasScrolled ScrollableControl.ScrollStateFullDrag ScrollableControl.GetScrollState(int) ScrollableControl.OnMouseWheel(MouseEventArgs) ScrollableControl.OnRightToLeftChanged(EventArgs) ScrollableControl.OnPaintBackground(PaintEventArgs) ScrollableControl.OnPaddingChanged(EventArgs) ScrollableControl.OnVisibleChanged(EventArgs) ScrollableControl.ScaleControl(SizeF, BoundsSpecified) ScrollableControl.SetDisplayRectLocation(int, int) ScrollableControl.ScrollControlIntoView(Control) ScrollableControl.ScrollToControl(Control) ScrollableControl.OnScroll(ScrollEventArgs) ScrollableControl.SetAutoScrollMargin(int, int) ScrollableControl.SetScrollState(int, bool) ScrollableControl.AutoScroll ScrollableControl.AutoScrollMargin ScrollableControl.AutoScrollPosition ScrollableControl.AutoScrollMinSize ScrollableControl.DisplayRectangle ScrollableControl.HScroll ScrollableControl.HorizontalScroll ScrollableControl.VScroll ScrollableControl.VerticalScroll ScrollableControl.Scroll Control.GetAccessibilityObjectById(int) Control.SetAutoSizeMode(AutoSizeMode) Control.GetAutoSizeMode() Control.GetPreferredSize(Size) Control.AccessibilityNotifyClients(AccessibleEvents, int) Control.AccessibilityNotifyClients(AccessibleEvents, int, int) Control.BeginInvoke(Delegate) Control.BeginInvoke(Delegate, params object[]) Control.BringToFront() Control.Contains(Control) Control.CreateAccessibilityInstance() Control.CreateControlsInstance() Control.CreateGraphics() Control.CreateHandle() Control.CreateControl() Control.DefWndProc(ref Message) Control.DestroyHandle() Control.DoDragDrop(object, DragDropEffects) Control.DrawToBitmap(Bitmap, Rectangle) Control.EndInvoke(IAsyncResult) Control.FindForm() Control.GetTopLevel() Control.RaiseKeyEvent(object, KeyEventArgs) Control.RaiseMouseEvent(object, MouseEventArgs) Control.Focus() Control.FromChildHandle(IntPtr) Control.FromHandle(IntPtr) Control.GetChildAtPoint(Point, GetChildAtPointSkip) Control.GetChildAtPoint(Point) Control.GetContainerControl() Control.GetScaledBounds(Rectangle, SizeF, BoundsSpecified) Control.GetNextControl(Control, bool) Control.GetStyle(ControlStyles) Control.Hide() Control.InitLayout() Control.Invalidate(Region) Control.Invalidate(Region, bool) Control.Invalidate() Control.Invalidate(bool) Control.Invalidate(Rectangle) Control.Invalidate(Rectangle, bool) Control.Invoke(Delegate) Control.Invoke(Delegate, params object[]) Control.InvokePaint(Control, PaintEventArgs) Control.InvokePaintBackground(Control, PaintEventArgs) Control.IsKeyLocked(Keys) Control.IsInputChar(char) Control.IsInputKey(Keys) Control.IsMnemonic(char, string) Control.LogicalToDeviceUnits(int) Control.ScaleBitmapLogicalToDevice(ref Bitmap) Control.NotifyInvalidate(Rectangle) Control.InvokeOnClick(Control, EventArgs) Control.OnAutoSizeChanged(EventArgs) Control.OnBackColorChanged(EventArgs) Control.OnBackgroundImageChanged(EventArgs) Control.OnBackgroundImageLayoutChanged(EventArgs) Control.OnBindingContextChanged(EventArgs) Control.OnCausesValidationChanged(EventArgs) Control.OnContextMenuChanged(EventArgs) Control.OnContextMenuStripChanged(EventArgs) Control.OnCursorChanged(EventArgs) Control.OnDockChanged(EventArgs) Control.OnEnabledChanged(EventArgs) Control.OnForeColorChanged(EventArgs) Control.OnNotifyMessage(Message) Control.OnParentBackColorChanged(EventArgs) Control.OnParentBackgroundImageChanged(EventArgs) Control.OnParentBindingContextChanged(EventArgs) Control.OnParentCursorChanged(EventArgs) Control.OnParentEnabledChanged(EventArgs) Control.OnParentFontChanged(EventArgs) Control.OnParentForeColorChanged(EventArgs) Control.OnParentRightToLeftChanged(EventArgs) Control.OnParentVisibleChanged(EventArgs) Control.OnPrint(PaintEventArgs) Control.OnTabIndexChanged(EventArgs) Control.OnTabStopChanged(EventArgs) Control.OnTextChanged(EventArgs) Control.OnClick(EventArgs) Control.OnClientSizeChanged(EventArgs) Control.OnControlAdded(ControlEventArgs) Control.OnControlRemoved(ControlEventArgs) Control.OnHandleCreated(EventArgs) Control.OnLocationChanged(EventArgs) Control.OnHandleDestroyed(EventArgs) Control.OnDoubleClick(EventArgs) Control.OnDragEnter(DragEventArgs) Control.OnDragOver(DragEventArgs) Control.OnDragLeave(EventArgs) Control.OnDragDrop(DragEventArgs) Control.OnGiveFeedback(GiveFeedbackEventArgs) Control.OnEnter(EventArgs) Control.InvokeGotFocus(Control, EventArgs) Control.OnGotFocus(EventArgs) Control.OnHelpRequested(HelpEventArgs) Control.OnInvalidated(InvalidateEventArgs) Control.OnKeyDown(KeyEventArgs) Control.OnKeyPress(KeyPressEventArgs) Control.OnKeyUp(KeyEventArgs) Control.OnLeave(EventArgs) Control.InvokeLostFocus(Control, EventArgs) Control.OnLostFocus(EventArgs) Control.OnMarginChanged(EventArgs) Control.OnMouseDoubleClick(MouseEventArgs) Control.OnMouseClick(MouseEventArgs) Control.OnMouseCaptureChanged(EventArgs) Control.OnMouseEnter(EventArgs) Control.OnMouseLeave(EventArgs) Control.OnDpiChangedBeforeParent(EventArgs) Control.OnDpiChangedAfterParent(EventArgs) Control.OnMouseHover(EventArgs) Control.OnMouseMove(MouseEventArgs) Control.OnMouseUp(MouseEventArgs) Control.OnMove(EventArgs) Control.OnPaint(PaintEventArgs) Control.OnQueryContinueDrag(QueryContinueDragEventArgs) Control.OnRegionChanged(EventArgs) Control.OnPreviewKeyDown(PreviewKeyDownEventArgs) Control.OnSizeChanged(EventArgs) Control.OnChangeUICues(UICuesEventArgs) Control.OnStyleChanged(EventArgs) Control.OnSystemColorsChanged(EventArgs) Control.OnValidating(CancelEventArgs) Control.OnValidated(EventArgs) Control.RescaleConstantsForDpi(int, int) Control.PerformLayout() Control.PerformLayout(Control, string) Control.PointToClient(Point) Control.PointToScreen(Point) Control.PreProcessMessage(ref Message) Control.PreProcessControlMessage(ref Message) Control.ProcessKeyEventArgs(ref Message) Control.ProcessKeyMessage(ref Message) Control.ProcessKeyPreview(ref Message) Control.RaiseDragEvent(object, DragEventArgs) Control.RaisePaintEvent(object, PaintEventArgs) Control.RecreateHandle() Control.RectangleToClient(Rectangle) Control.RectangleToScreen(Rectangle) Control.ReflectMessage(IntPtr, ref Message) Control.Refresh() Control.ResetMouseEventArgs() Control.ResetText() Control.ResumeLayout() Control.ResumeLayout(bool) Control.Scale(SizeF) Control.Select() Control.SelectNextControl(Control, bool, bool, bool, bool) Control.SendToBack() Control.SetBounds(int, int, int, int) Control.SetBounds(int, int, int, int, BoundsSpecified) Control.SetBoundsCore(int, int, int, int, BoundsSpecified) Control.SetClientSizeCore(int, int) Control.SizeFromClientSize(Size) Control.SetStyle(ControlStyles, bool) Control.SetTopLevel(bool) Control.SetVisibleCore(bool) Control.RtlTranslateAlignment(HorizontalAlignment) Control.RtlTranslateAlignment(LeftRightAlignment) Control.RtlTranslateAlignment(ContentAlignment) Control.RtlTranslateHorizontal(HorizontalAlignment) Control.RtlTranslateLeftRight(LeftRightAlignment) Control.RtlTranslateContent(ContentAlignment) Control.Show() Control.SuspendLayout() Control.Update() Control.UpdateBounds() Control.UpdateBounds(int, int, int, int) Control.UpdateBounds(int, int, int, int, int, int) Control.UpdateZOrder() Control.UpdateStyles() Control.OnImeModeChanged(EventArgs) Control.AccessibilityObject Control.AccessibleDefaultActionDescription Control.AccessibleDescription Control.AccessibleName Control.AccessibleRole Control.AllowDrop Control.Anchor Control.AutoScrollOffset Control.LayoutEngine Control.BackColor Control.BackgroundImage Control.BackgroundImageLayout Control.Bottom Control.Bounds Control.CanFocus Control.CanRaiseEvents Control.CanSelect Control.Capture Control.CausesValidation Control.CheckForIllegalCrossThreadCalls Control.ClientRectangle Control.ClientSize Control.CompanyName Control.ContainsFocus Control.ContextMenu Control.ContextMenuStrip Control.Controls Control.Created Control.Cursor Control.DataBindings Control.DefaultBackColor Control.DefaultCursor Control.DefaultFont Control.DefaultForeColor Control.DefaultMargin Control.DefaultMaximumSize Control.DefaultMinimumSize Control.DefaultPadding Control.DeviceDpi Control.IsDisposed Control.Disposing Control.Dock Control.DoubleBuffered Control.Enabled Control.Focused Control.Font Control.FontHeight Control.ForeColor Control.Handle Control.HasChildren Control.Height Control.IsHandleCreated Control.InvokeRequired Control.IsAccessible Control.IsMirrored Control.Left Control.Location Control.Margin Control.MaximumSize Control.MinimumSize Control.ModifierKeys Control.MouseButtons Control.MousePosition Control.Name Control.Parent Control.ProductName Control.ProductVersion Control.RecreatingHandle Control.Region Control.ResizeRedraw Control.Right Control.RightToLeft Control.ScaleChildren Control.Site Control.Size Control.TabIndex Control.TabStop Control.Tag Control.Text Control.Top Control.TopLevelControl Control.ShowKeyboardCues Control.ShowFocusCues Control.UseWaitCursor Control.Visible Control.Width Control.PreferredSize Control.Padding Control.DefaultImeMode Control.ImeMode Control.ImeModeBase Control.PropagatingImeMode Control.BackColorChanged Control.BackgroundImageChanged Control.BackgroundImageLayoutChanged Control.BindingContextChanged Control.CausesValidationChanged Control.ClientSizeChanged Control.ContextMenuChanged Control.ContextMenuStripChanged Control.CursorChanged Control.DockChanged Control.EnabledChanged Control.FontChanged Control.ForeColorChanged Control.LocationChanged Control.MarginChanged Control.RegionChanged Control.RightToLeftChanged Control.SizeChanged Control.TabIndexChanged Control.TabStopChanged Control.TextChanged Control.VisibleChanged Control.Click Control.ControlAdded Control.ControlRemoved Control.DragDrop Control.DragEnter Control.DragOver Control.DragLeave Control.GiveFeedback Control.HandleCreated Control.HandleDestroyed Control.HelpRequested Control.Invalidated Control.PaddingChanged Control.Paint Control.QueryContinueDrag Control.QueryAccessibilityHelp Control.DoubleClick Control.Enter Control.GotFocus Control.KeyDown Control.KeyPress Control.KeyUp Control.Layout Control.Leave Control.LostFocus Control.MouseClick Control.MouseDoubleClick Control.MouseCaptureChanged Control.MouseDown Control.MouseEnter Control.MouseLeave Control.DpiChangedBeforeParent Control.DpiChangedAfterParent Control.MouseHover Control.MouseMove Control.MouseUp Control.MouseWheel Control.Move Control.PreviewKeyDown Control.Resize Control.ChangeUICues Control.StyleChanged Control.SystemColorsChanged Control.Validating Control.Validated Control.ParentChanged Control.ImeModeChanged Component.Dispose() Component.GetService(Type) Component.ToString() Component.Events Component.Container Component.DesignMode Component.Disposed MarshalByRefObject.MemberwiseClone(bool) MarshalByRefObject.GetLifetimeService() MarshalByRefObject.InitializeLifetimeService() MarshalByRefObject.CreateObjRef(Type) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TimeSeriesOxyPlotBase() Initializes a new instance of the TimeSeriesOxyPlotBase class public TimeSeriesOxyPlotBase() Properties BufferData Gets or sets a boolean value that determines whether to buffer the data beyond the capacity. public bool BufferData { get; set; } Property Value bool Capacity Gets or sets the integer value that determines how many data points should be shown along the x axis. public int Capacity { get; set; } Property Value int StartTime Gets or sets the datetime value that determines the starting time of the data values. public DateTime StartTime { get; set; } Property Value DateTime StatusStrip Gets the status strip control. public StatusStrip StatusStrip { get; } Property Value StatusStrip ValueLabel Gets or sets the label of the value axis in the time series plot. public string ValueLabel { get; set; } Property Value string Methods AddComboBoxWithLabel(string, IEnumerable, int, EventHandler) Method to add a combobox with a label to the status strip. Requires a string label, an enumerable data source, a selected index, and a callback method for the selected index changed event. public void AddComboBoxWithLabel(string label, IEnumerable dataSource, int selectedIndex, EventHandler onComboBoxSelectionChanged) Parameters label string dataSource IEnumerable selectedIndex int onComboBoxSelectionChanged EventHandler AddNewAreaSeries(string, OxyColor?, OxyColor?, byte) Method to add a new area series to the data plot. Requires a string for the name of the area series Optional parameters are color of the lines, fill color, and opacity. Returns the new line series. public AreaSeries AddNewAreaSeries(string areaSeriesName, OxyColor? color = null, OxyColor? fill = null, byte opacity = 100) Parameters areaSeriesName string color OxyColor? fill OxyColor? opacity byte Returns AreaSeries AddNewLineSeries(string, OxyColor?) Method to add a new line series to the data plot. Requires a string for the name of the line series Color of the line series is optional. public LineSeries AddNewLineSeries(string lineSeriesName, OxyColor? color = null) Parameters lineSeriesName string color OxyColor? Returns LineSeries AddToAreaSeries(AreaSeries, DateTime, double, double) Method to add data to an area series. Requires the area series, time, value1, and value2. public void AddToAreaSeries(AreaSeries areaSeries, DateTime time, double value1, double value2) Parameters areaSeries AreaSeries time DateTime value1 double value2 double AddToLineSeries(LineSeries, DateTime, double) Method to add data to a line series. Requires the line series, time, and value. public void AddToLineSeries(LineSeries lineSeries, DateTime time, double value) Parameters lineSeries LineSeries time DateTime value double ResetAreaSeries(AreaSeries) Method to reset the area series. public void ResetAreaSeries(AreaSeries areaSeries) Parameters areaSeries AreaSeries ResetAxes() Method to reset the x and y axes to their default. public void ResetAxes() ResetLineSeries(LineSeries) Method to reset the line series. public void ResetLineSeries(LineSeries lineSeries) Parameters lineSeries LineSeries ResetModelSeries() Method to reset all series in the current PlotModel. public void ResetModelSeries() SetAxes(DateTime, DateTime) Set the minimum and maximum values to show along the x axis. Requires the minTime and maxTime. public void SetAxes(DateTime minTime, DateTime maxTime) Parameters minTime DateTime maxTime DateTime UpdatePlot() Method to update the plot. public void UpdatePlot()"
  },
  "api/Bonsai.ML.Design.html": {
    "href": "api/Bonsai.ML.Design.html",
    "title": "Namespace Bonsai.ML.Design | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.Design Classes BarSeriesOxyPlotBase Provides a user control to display data as a bar plot using OxyPlot. EllipseHelper Provides helper methods to compute ellipse parameters from a covariance matrix. EllipseParameters Represents the parameters of an ellipse. HeatMapSeriesOxyPlotBase Provides a user control to display 2D data as a heatmap using OxyPlot. MultidimensionalArrayVisualizer Provides a type visualizer to display multi dimensional array data as a heatmap. TimeSeriesOxyPlotBase Provides a user control to display time series data using OxyPlot."
  },
  "api/Bonsai.ML.HiddenMarkovModels.DeserializeFromJson.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | Bonsai.ML",
    "keywords": "Class DeserializeFromJson Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() Initializes a new instance of the DeserializeFromJson class. public DeserializeFromJson() Properties Type Gets or sets the type of the object to deserialize. public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Design.GaussianObservationStatisticsVisualizer.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Design.GaussianObservationStatisticsVisualizer.html",
    "title": "Class GaussianObservationStatisticsVisualizer | Bonsai.ML",
    "keywords": "Class GaussianObservationStatisticsVisualizer Namespace Bonsai.ML.HiddenMarkovModels.Design Assembly Bonsai.ML.HiddenMarkovModels.Design.dll Provides a type visualizer of GaussianObservationsStatistics to display the means and standard deviations of each state of an HMM with gaussian observations model. public class GaussianObservationStatisticsVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer GaussianObservationStatisticsVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Design.GaussianObservationsStatisticsClustersVisualizer.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Design.GaussianObservationsStatisticsClustersVisualizer.html",
    "title": "Class GaussianObservationsStatisticsClustersVisualizer | Bonsai.ML",
    "keywords": "Class GaussianObservationsStatisticsClustersVisualizer Namespace Bonsai.ML.HiddenMarkovModels.Design Assembly Bonsai.ML.HiddenMarkovModels.Design.dll Provides a type visualizer of GaussianObservationsStatistics to display how the observations cluster with respect to the mean and covariance of each state of an HMM with gaussian observations model. public class GaussianObservationsStatisticsClustersVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer GaussianObservationsStatisticsClustersVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BufferCount Gets or sets the buffer count. public int BufferCount { get; set; } Property Value int BufferData Gets or sets a value indicating whether the data should be buffered. public bool BufferData { get; set; } Property Value bool Dimension1ComboBox Gets the first dimension combo box. public ToolStripComboBox Dimension1ComboBox { get; } Property Value ToolStripComboBox Dimension1SelectedIndex Gets the selected index of the first dimension. public int Dimension1SelectedIndex { get; set; } Property Value int Dimension2ComboBox Gets the second dimension combo box. public ToolStripComboBox Dimension2ComboBox { get; } Property Value ToolStripComboBox Dimension2SelectedIndex Gets the selected index of the second dimension. public int Dimension2SelectedIndex { get; set; } Property Value int StatusStrip Gets the status strip. public StatusStrip StatusStrip { get; } Property Value StatusStrip Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Design.StateProbabilityVisualizer.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Design.StateProbabilityVisualizer.html",
    "title": "Class StateProbabilityVisualizer | Bonsai.ML",
    "keywords": "Class StateProbabilityVisualizer Namespace Bonsai.ML.HiddenMarkovModels.Design Assembly Bonsai.ML.HiddenMarkovModels.Design.dll Provides a type visualizer of StateProbability to display the probabilities of being in each state of an HMM given the observation. public class StateProbabilityVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer StateProbabilityVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Design.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Design.html",
    "title": "Namespace Bonsai.ML.HiddenMarkovModels.Design | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.HiddenMarkovModels.Design Classes GaussianObservationStatisticsVisualizer Provides a type visualizer of GaussianObservationsStatistics to display the means and standard deviations of each state of an HMM with gaussian observations model. GaussianObservationsStatisticsClustersVisualizer Provides a type visualizer of GaussianObservationsStatistics to display how the observations cluster with respect to the mean and covariance of each state of an HMM with gaussian observations model. StateProbabilityVisualizer Provides a type visualizer of StateProbability to display the probabilities of being in each state of an HMM given the observation."
  },
  "api/Bonsai.ML.HiddenMarkovModels.ModelParameters.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.ModelParameters.html",
    "title": "Class ModelParameters | Bonsai.ML",
    "keywords": "Class ModelParameters Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the model parameters of a Hidden Markov Model (HMM). [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonConverter(typeof(ModelParametersJsonConverter))] public class ModelParameters : PythonStringBuilder Inheritance object PythonStringBuilder ModelParameters Inherited Members PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ModelParameters() Initializes a new instance of the ModelParameters class. public ModelParameters() Properties Dimensions The dimensionality of the observations into the HMM model. public int Dimensions { get; set; } Property Value int NumStates The number of states of the HMM model. public int NumStates { get; set; } Property Value int ObservationsModelType The type of distribution that the HMM will use to model the emission of data observations. public ObservationsModelType ObservationsModelType { get; set; } Property Value ObservationsModelType StateParameters The state parameters of the HMM model. public StateParameters StateParameters { get; set; } Property Value StateParameters TransitionsModelType The type of transition model that the HMM will use to calculate the probabilities of transitioning between states. public TransitionsModelType TransitionsModelType { get; set; } Property Value TransitionsModelType Methods BuildString() Method used to build a string representation of the object. protected override string BuildString() Returns string Process() Returns an observable sequence of ModelParameters objects. public IObservable<ModelParameters> Process() Returns IObservable<ModelParameters> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of ModelParameters objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<ModelParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<ModelParameters> Process<TSource>(IObservable<TSource>) Takes an observable seqence and returns an observable sequence of ModelParameters objects that are emitted every time the input sequence emits a new element. public IObservable<ModelParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<ModelParameters> Type Parameters TSource"
  },
  "api/Bonsai.ML.HiddenMarkovModels.ModelParametersJsonConverter.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.ModelParametersJsonConverter.html",
    "title": "Class ModelParametersJsonConverter | Bonsai.ML",
    "keywords": "Class ModelParametersJsonConverter Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Provides a type converter to convert between ModelParameters and a JSON string representation. public class ModelParametersJsonConverter : JsonConverter<ModelParameters> Inheritance object JsonConverter JsonConverter<ModelParameters> ModelParametersJsonConverter Inherited Members JsonConverter<ModelParameters>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<ModelParameters>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<ModelParameters>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadJson(JsonReader, Type, ModelParameters, bool, JsonSerializer) Reads the JSON representation of the object. public override ModelParameters ReadJson(JsonReader reader, Type objectType, ModelParameters existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue ModelParameters The existing value of object being read. If there is no existing value then null will be used. hasExistingValue bool The existing value has a value. serializer JsonSerializer The calling serializer. Returns ModelParameters The object value. WriteJson(JsonWriter, ModelParameters, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, ModelParameters value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value ModelParameters The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.AutoRegressiveObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.AutoRegressiveObservations.html",
    "title": "Class AutoRegressiveObservations | Bonsai.ML",
    "keywords": "Class AutoRegressiveObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of AutoRegressiveObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class AutoRegressiveObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel AutoRegressiveObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors AutoRegressiveObservations() Constructs a new instance of the PythonModel class. public AutoRegressiveObservations() AutoRegressiveObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public AutoRegressiveObservations(params object[] args) Parameters args object[] Properties As The As of the observations for each state. public double[,,] As { get; set; } Property Value double[,,] Bs The bs of the observations for each state. public double[,] Bs { get; set; } Property Value double[,] Kwargs The dictionary of keyword arguments that are used to construct the model. [JsonProperty] public override Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray public static string[] KwargsArray { get; } Property Value string[] Lags The lags of the observations for each state. public int Lags { get; set; } Property Value int ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] SqrtSigmas The square root sigmas of the observations for each state. public double[,,] SqrtSigmas { get; set; } Property Value double[,,] Vs The Vs of the observations for each state. public double[,,] Vs { get; set; } Property Value double[,,] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of AutoRegressiveObservations objects. public IObservable<AutoRegressiveObservations> Process() Returns IObservable<AutoRegressiveObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of AutoRegressiveObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<AutoRegressiveObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<AutoRegressiveObservations> UpdateKwargs(params object[]) Updates the kwargs dictionary. protected override void UpdateKwargs(params object[] args) Parameters args object[] UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.BernoulliObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.BernoulliObservations.html",
    "title": "Class BernoulliObservations | Bonsai.ML",
    "keywords": "Class BernoulliObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of BernoulliObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class BernoulliObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel BernoulliObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.KwargsArray PythonModel.Kwargs PythonModel.UpdateKwargs(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors BernoulliObservations() Constructs a new instance of the PythonModel class. public BernoulliObservations() BernoulliObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public BernoulliObservations(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties LogitPs The logit P of the observations for each state. public double[,] LogitPs { get; set; } Property Value double[,] ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of BernoulliObservations objects. public IObservable<BernoulliObservations> Process() Returns IObservable<BernoulliObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of BernoulliObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<BernoulliObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<BernoulliObservations> UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.CategoricalObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.CategoricalObservations.html",
    "title": "Class CategoricalObservations | Bonsai.ML",
    "keywords": "Class CategoricalObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of CategoricalObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class CategoricalObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel CategoricalObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors CategoricalObservations() Constructs a new instance of the PythonModel class. public CategoricalObservations() CategoricalObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public CategoricalObservations(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Categories The number of categories in the observations. public int Categories { get; set; } Property Value int Kwargs The dictionary of keyword arguments that are used to construct the model. [JsonProperty] [Browsable(false)] public override Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray [Browsable(false)] public static string[] KwargsArray { get; } Property Value string[] Logits The logit of the observations for each state. public double[,,] Logits { get; set; } Property Value double[,,] ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of CategoricalObservations objects. public IObservable<CategoricalObservations> Process() Returns IObservable<CategoricalObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of CategoricalObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<CategoricalObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<CategoricalObservations> UpdateKwargs(params object[]) Updates the kwargs dictionary. protected override void UpdateKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.ExponentialObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.ExponentialObservations.html",
    "title": "Class ExponentialObservations | Bonsai.ML",
    "keywords": "Class ExponentialObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of ExponentialObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class ExponentialObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel ExponentialObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.KwargsArray PythonModel.Kwargs PythonModel.UpdateKwargs(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ExponentialObservations() Constructs a new instance of the PythonModel class. public ExponentialObservations() ExponentialObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public ExponentialObservations(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties LogLambdas The log lambdas of the observations for each state. public double[,] LogLambdas { get; set; } Property Value double[,] ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of ExponentialObservations objects. public IObservable<ExponentialObservations> Process() Returns IObservable<ExponentialObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of ExponentialObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<ExponentialObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<ExponentialObservations> UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.GaussianObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.GaussianObservations.html",
    "title": "Class GaussianObservations | Bonsai.ML",
    "keywords": "Class GaussianObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of GaussianObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class GaussianObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel GaussianObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.KwargsArray PythonModel.Kwargs PythonModel.UpdateKwargs(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors GaussianObservations() Constructs a new instance of the PythonModel class. public GaussianObservations() GaussianObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public GaussianObservations(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Mus The means of the observations for each state. public double[,] Mus { get; set; } Property Value double[,] ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] SqrtSigmas The standard deviations of the observations for each state. public double[,,] SqrtSigmas { get; set; } Property Value double[,,] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of GaussianObservations objects. public IObservable<GaussianObservations> Process() Returns IObservable<GaussianObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of GaussianObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<GaussianObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<GaussianObservations> UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.GaussianObservationsStatistics.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.GaussianObservationsStatistics.html",
    "title": "Class GaussianObservationsStatistics | Bonsai.ML",
    "keywords": "Class GaussianObservationsStatistics Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that will transform an observable sequence of Python.Runtime.PyObject into an observable sequence of GaussianObservationsStatistics. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class GaussianObservationsStatistics Inheritance object GaussianObservationsStatistics Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties BatchObservations The batch observations that the model has seen. public double[,] BatchObservations { get; set; } Property Value double[,] CovarianceMatrices The covariance matrices of the observations for each state. public double[,,] CovarianceMatrices { get; set; } Property Value double[,,] InferredMostProbableStates The sequence of inferred most probable states. public int[] InferredMostProbableStates { get; set; } Property Value int[] Means The means of the observations for each state. public double[,] Means { get; set; } Property Value double[,] StdDevs The standard deviations of the observations for each state. public double[,] StdDevs { get; set; } Property Value double[,] Methods Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of GaussianObservationsStatistics objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<GaussianObservationsStatistics> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<GaussianObservationsStatistics>"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModel.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModel.html",
    "title": "Class ObservationsModel | Bonsai.ML",
    "keywords": "Class ObservationsModel Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll An abstract class for creating an Observations model. public abstract class ObservationsModel : PythonModel Inheritance object PythonStringBuilder PythonModel ObservationsModel Derived AutoRegressiveObservations BernoulliObservations CategoricalObservations ExponentialObservations GaussianObservations PoissonObservations Inherited Members PythonModel.Params PythonModel.KwargsArray PythonModel.Kwargs PythonModel.CheckKwargs(params object[]) PythonModel.UpdateKwargs(params object[]) PythonModel.CheckParams(params object[]) PythonModel.UpdateParams(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ObservationsModel() Constructs a new instance of the PythonModel class. public ObservationsModel() ObservationsModel(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public ObservationsModel(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties ModelName The name of the base python model class. [Browsable(false)] protected override string ModelName { get; } Property Value string ModelType The specific type of the model. [Browsable(false)] protected override string ModelType { get; } Property Value string ObservationsModelType The type of Observations model. public abstract ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelLookup.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelLookup.html",
    "title": "Class ObservationsModelLookup | Bonsai.ML",
    "keywords": "Class ObservationsModelLookup Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll A lookup class for relating different ObservationsModelType to ObservationsModel and their corresponding Python string representations. public static class ObservationsModelLookup Inheritance object ObservationsModelLookup Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetFromString(string) Gets the ObservationsModelType corresponding to the given Python string representation. public static ObservationsModelType GetFromString(string value) Parameters value string Returns ObservationsModelType GetFromType(Type) Gets the ObservationsModelType corresponding to the given Type of ObservationsModel . public static ObservationsModelType GetFromType(Type type) Parameters type Type Returns ObservationsModelType GetObservationsClassType(ObservationsModelType) Gets the Type of the ObservationsModel corresponding to the given ObservationsModelType. public static Type GetObservationsClassType(ObservationsModelType type) Parameters type ObservationsModelType Returns Type GetString(ObservationsModelType) Gets the Python string representation of the given ObservationsModelType. public static string GetString(ObservationsModelType type) Parameters type ObservationsModelType Returns string"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelType.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelType.html",
    "title": "Enum ObservationsModelType | Bonsai.ML",
    "keywords": "Enum ObservationsModelType Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the type of observations in a hidden Markov model. public enum ObservationsModelType Fields AutoRegressive = 4 Autoregressive observations. Bernoulli = 2 Bernoulli observations. Categorical = 5 Categorical observations. Exponential = 1 Exponential observations. Gaussian = 0 Gaussian observations. Poisson = 3 Poisson observations."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelTypeJsonConverter.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.ObservationsModelTypeJsonConverter.html",
    "title": "Class ObservationsModelTypeJsonConverter | Bonsai.ML",
    "keywords": "Class ObservationsModelTypeJsonConverter Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Provides a type converter to convert between ObservationsModelType and the corresponding Python string representation. public class ObservationsModelTypeJsonConverter : JsonConverter<ObservationsModelType> Inheritance object JsonConverter JsonConverter<ObservationsModelType> ObservationsModelTypeJsonConverter Inherited Members JsonConverter<ObservationsModelType>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<ObservationsModelType>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<ObservationsModelType>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadJson(JsonReader, Type, ObservationsModelType, bool, JsonSerializer) Reads the JSON representation of the object. public override ObservationsModelType ReadJson(JsonReader reader, Type objectType, ObservationsModelType existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue ObservationsModelType The existing value of object being read. If there is no existing value then null will be used. hasExistingValue bool The existing value has a value. serializer JsonSerializer The calling serializer. Returns ObservationsModelType The object value. WriteJson(JsonWriter, ObservationsModelType, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, ObservationsModelType value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value ObservationsModelType The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.PoissonObservations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.PoissonObservations.html",
    "title": "Class PoissonObservations | Bonsai.ML",
    "keywords": "Class PoissonObservations Namespace Bonsai.ML.HiddenMarkovModels.Observations Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of PoissonObservations objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class PoissonObservations : ObservationsModel Inheritance object PythonStringBuilder PythonModel ObservationsModel PoissonObservations Inherited Members ObservationsModel.ModelName ObservationsModel.ModelType PythonModel.KwargsArray PythonModel.Kwargs PythonModel.UpdateKwargs(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PoissonObservations() Constructs a new instance of the PythonModel class. public PoissonObservations() PoissonObservations(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public PoissonObservations(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties LogLambdas The log lambdas of the observations for each state. public double[,] LogLambdas { get; set; } Property Value double[,] ObservationsModelType The type of Observations model. [JsonProperty] [JsonConverter(typeof(ObservationsModelTypeJsonConverter))] [Browsable(false)] public override ObservationsModelType ObservationsModelType { get; } Property Value ObservationsModelType Params The parameters that are used to define the model. [JsonProperty] public override object[] Params { get; } Property Value object[] Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of PoissonObservations objects. public IObservable<PoissonObservations> Process() Returns IObservable<PoissonObservations> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of PoissonObservations objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<PoissonObservations> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<PoissonObservations> UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Observations.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Observations.html",
    "title": "Namespace Bonsai.ML.HiddenMarkovModels.Observations | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.HiddenMarkovModels.Observations Classes AutoRegressiveObservations Represents an operator that is used to create and transform an observable sequence of AutoRegressiveObservations objects. BernoulliObservations Represents an operator that is used to create and transform an observable sequence of BernoulliObservations objects. CategoricalObservations Represents an operator that is used to create and transform an observable sequence of CategoricalObservations objects. ExponentialObservations Represents an operator that is used to create and transform an observable sequence of ExponentialObservations objects. GaussianObservations Represents an operator that is used to create and transform an observable sequence of GaussianObservations objects. GaussianObservationsStatistics Represents an operator that will transform an observable sequence of Python.Runtime.PyObject into an observable sequence of GaussianObservationsStatistics. ObservationsModel An abstract class for creating an Observations model. ObservationsModelLookup A lookup class for relating different ObservationsModelType to ObservationsModel and their corresponding Python string representations. ObservationsModelTypeJsonConverter Provides a type converter to convert between ObservationsModelType and the corresponding Python string representation. PoissonObservations Represents an operator that is used to create and transform an observable sequence of PoissonObservations objects. Enums ObservationsModelType Represents the type of observations in a hidden Markov model."
  },
  "api/Bonsai.ML.HiddenMarkovModels.PythonModel.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.PythonModel.html",
    "title": "Class PythonModel | Bonsai.ML",
    "keywords": "Class PythonModel Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll An abstract class for creating a Python model. public abstract class PythonModel : PythonStringBuilder Inheritance object PythonStringBuilder PythonModel Derived ObservationsModel TransitionsModel Inherited Members PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors PythonModel() Constructs a new instance of the PythonModel class. public PythonModel() PythonModel(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public PythonModel(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Kwargs The dictionary of keyword arguments that are used to construct the model. [Browsable(false)] public virtual Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray The array of keyword arguments used to construct the model. public static string[] KwargsArray { get; } Property Value string[] ModelName The name of the base python model class. protected abstract string ModelName { get; } Property Value string ModelType The specific type of the model. protected abstract string ModelType { get; } Property Value string Params The parameters that are used to define the model. [Browsable(false)] public virtual object[] Params { get; set; } Property Value object[] Methods BuildString() Method used to build a string representation of the object. protected override string BuildString() Returns string CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected virtual void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected virtual void CheckParams(params object[] @params) Parameters params object[] The parameters. UpdateKwargs(params object[]) Updates the kwargs dictionary. protected virtual void UpdateKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. UpdateParams(params object[]) Updates the parameters. protected virtual void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.PythonStringBuilder.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.PythonStringBuilder.html",
    "title": "Class PythonStringBuilder | Bonsai.ML",
    "keywords": "Class PythonStringBuilder Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Provides a base class for building string representations of Python objects. public abstract class PythonStringBuilder Inheritance object PythonStringBuilder Derived ModelParameters PythonModel StateParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields StringBuilder The internal string builder used to build the string representation. protected readonly StringBuilder StringBuilder Field Value StringBuilder Methods BuildString() Method used to build a string representation of the object. protected virtual string BuildString() Returns string ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object. UpdateString() Sets a flag to update the string cache on the next call to the ToString() method. protected void UpdateString()"
  },
  "api/Bonsai.ML.HiddenMarkovModels.SerializeToJson.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.SerializeToJson.html",
    "title": "Class SerializeToJson | Bonsai.ML",
    "keywords": "Class SerializeToJson Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<ModelParameters>) Serializes each ModelParameters object in the sequence to a JSON string. public IObservable<string> Process(IObservable<ModelParameters> source) Parameters source IObservable<ModelParameters> A sequence of ModelParameters objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding ModelParameters object. Process(IObservable<StateParameters>) Serializes each StateParameters object in the sequence to a JSON string. public IObservable<string> Process(IObservable<StateParameters> source) Parameters source IObservable<StateParameters> A sequence of StateParameters objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding StateParameters object."
  },
  "api/Bonsai.ML.HiddenMarkovModels.StateParameters.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.StateParameters.html",
    "title": "Class StateParameters | Bonsai.ML",
    "keywords": "Class StateParameters Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the state parameters of a Hidden Markov Model (HMM). [Combinator] [JsonConverter(typeof(StateParametersJsonConverter))] [WorkflowElementCategory(ElementCategory.Source)] public class StateParameters : PythonStringBuilder Inheritance object PythonStringBuilder StateParameters Inherited Members PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties InitialStateDistribution The initial state distribution. [JsonProperty(\"initial_state_distribution\")] public double[] InitialStateDistribution { get; set; } Property Value double[] Observations The observations. [JsonProperty(\"observations_params\")] public ObservationsModel Observations { get; set; } Property Value ObservationsModel Transitions The transitions model. [JsonProperty(\"transitions_params\")] public TransitionsModel Transitions { get; set; } Property Value TransitionsModel Methods BuildString() Method used to build a string representation of the object. protected override string BuildString() Returns string Process() Returns an observable sequence of StateParameters objects. public IObservable<StateParameters> Process() Returns IObservable<StateParameters> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of StateParameters objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<StateParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<StateParameters> Process<TSource>(IObservable<TSource>) Takes an observable seqence and returns an observable sequence of StateParameters objects that are emitted every time the input sequence emits a new element. public IObservable<StateParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<StateParameters> Type Parameters TSource"
  },
  "api/Bonsai.ML.HiddenMarkovModels.StateParametersJsonConverter.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.StateParametersJsonConverter.html",
    "title": "Class StateParametersJsonConverter | Bonsai.ML",
    "keywords": "Class StateParametersJsonConverter Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Provides a type converter to convert between StateParameters and a JSON string representation. public class StateParametersJsonConverter : JsonConverter<StateParameters> Inheritance object JsonConverter JsonConverter<StateParameters> StateParametersJsonConverter Inherited Members JsonConverter<StateParameters>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<StateParameters>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<StateParameters>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadJson(JsonReader, Type, StateParameters, bool, JsonSerializer) Reads the JSON representation of the object. public override StateParameters ReadJson(JsonReader reader, Type objectType, StateParameters existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue StateParameters The existing value of object being read. If there is no existing value then null will be used. hasExistingValue bool The existing value has a value. serializer JsonSerializer The calling serializer. Returns StateParameters The object value. WriteJson(JsonWriter, StateParameters, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, StateParameters value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value StateParameters The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bonsai.ML.HiddenMarkovModels.StateProbability.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.StateProbability.html",
    "title": "Class StateProbability | Bonsai.ML",
    "keywords": "Class StateProbability Namespace Bonsai.ML.HiddenMarkovModels Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the probabilities of being in each state of a Hidden Markov Model (HMM) given the observation. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class StateProbability Inheritance object StateProbability Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties HighestProbableState The state with the highest probability. public int HighestProbableState { get; } Property Value int Probabilities The probability of being in each state given the observation. public double[] Probabilities { get; } Property Value double[] Methods Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of StateProbability objects by accessing the state_probabilities attribute of the Python.Runtime.PyObject. public IObservable<StateProbability> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<StateProbability>"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.ConstrainedStationaryTransitions.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.ConstrainedStationaryTransitions.html",
    "title": "Class ConstrainedStationaryTransitions | Bonsai.ML",
    "keywords": "Class ConstrainedStationaryTransitions Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of ConstrainedStationaryTransitions objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class ConstrainedStationaryTransitions : TransitionsModel Inheritance object PythonStringBuilder PythonModel TransitionsModel ConstrainedStationaryTransitions Inherited Members TransitionsModel.ModelName TransitionsModel.ModelType PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ConstrainedStationaryTransitions() Constructs a new instance of the PythonModel class. public ConstrainedStationaryTransitions() ConstrainedStationaryTransitions(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public ConstrainedStationaryTransitions(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Kwargs The dictionary of keyword arguments that are used to construct the model. [JsonProperty] public override Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray public static string[] KwargsArray { get; } Property Value string[] LogPs The Log Ps of the transitions. public double[,] LogPs { get; set; } Property Value double[,] Params The parameters that are used to define the model. [JsonProperty] [Browsable(false)] public override object[] Params { get; } Property Value object[] TransitionMask The mask which gets applied to the transition matrix to prohibit certain transitions. It must be written in JSON format as an int[,] with the same shape as the transition matrix (nStates x nStates). For example, the mask [[1, 0], [1, 1]] is valid and would prohibit transitions from state 0 to state 1. public string TransitionMask { get; set; } Property Value string TransitionsModelType The type of Transitions model. [JsonProperty] [JsonConverter(typeof(TransitionsModelTypeJsonConverter))] [Browsable(false)] public override TransitionsModelType TransitionsModelType { get; } Property Value TransitionsModelType Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of ConstrainedStationaryTransitions objects. public IObservable<ConstrainedStationaryTransitions> Process() Returns IObservable<ConstrainedStationaryTransitions> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of ConstrainedStationaryTransitions objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<ConstrainedStationaryTransitions> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<ConstrainedStationaryTransitions> UpdateKwargs(params object[]) Updates the kwargs dictionary. protected override void UpdateKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.NeuralNetworkRecurrentTransitions.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.NeuralNetworkRecurrentTransitions.html",
    "title": "Class NeuralNetworkRecurrentTransitions | Bonsai.ML",
    "keywords": "Class NeuralNetworkRecurrentTransitions Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of NeuralNetworkRecurrentTransitions objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class NeuralNetworkRecurrentTransitions : TransitionsModel Inheritance object PythonStringBuilder PythonModel TransitionsModel NeuralNetworkRecurrentTransitions Inherited Members TransitionsModel.ModelName TransitionsModel.ModelType PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors NeuralNetworkRecurrentTransitions() Constructs a new instance of the PythonModel class. public NeuralNetworkRecurrentTransitions() NeuralNetworkRecurrentTransitions(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public NeuralNetworkRecurrentTransitions(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Biases The biases. public List<double[]> Biases { get; set; } Property Value List<double[]> HiddenLayerSizes The sizes of the hidden layers. public int[] HiddenLayerSizes { get; set; } Property Value int[] Kwargs The dictionary of keyword arguments that are used to construct the model. [JsonProperty] public override Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray public static string[] KwargsArray { get; } Property Value string[] LogPs The Log Ps of the transitions. public double[,] LogPs { get; set; } Property Value double[,] NonlinearityType The type of nonlinearity or activation function. public NonlinearityType NonlinearityType { get; set; } Property Value NonlinearityType Params The parameters that are used to define the model. [JsonProperty] [Browsable(false)] public override object[] Params { get; } Property Value object[] TransitionsModelType The type of Transitions model. [JsonProperty] [JsonConverter(typeof(TransitionsModelTypeJsonConverter))] [Browsable(false)] public override TransitionsModelType TransitionsModelType { get; } Property Value TransitionsModelType Weights The weights. public List<double[,]> Weights { get; set; } Property Value List<double[,]> Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of NeuralNetworkRecurrentTransitions objects. public IObservable<NeuralNetworkRecurrentTransitions> Process() Returns IObservable<NeuralNetworkRecurrentTransitions> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of NeuralNetworkRecurrentTransitions objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<NeuralNetworkRecurrentTransitions> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<NeuralNetworkRecurrentTransitions> UpdateKwargs(params object[]) Updates the kwargs dictionary. protected override void UpdateKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.NonlinearityType.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.NonlinearityType.html",
    "title": "Enum NonlinearityType | Bonsai.ML",
    "keywords": "Enum NonlinearityType Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the type of nonlinearity to use in a recurrent neural network. public enum NonlinearityType Fields ReLU = 0 Rectified linear unit (ReLU) nonlinearity. Sigmoid = 2 Sigmoid nonlinearity. Tanh = 1 Tanh nonlinearity."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.StationaryTransitions.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.StationaryTransitions.html",
    "title": "Class StationaryTransitions | Bonsai.ML",
    "keywords": "Class StationaryTransitions Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of StationaryTransitions objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class StationaryTransitions : TransitionsModel Inheritance object PythonStringBuilder PythonModel TransitionsModel StationaryTransitions Inherited Members TransitionsModel.ModelName TransitionsModel.ModelType PythonModel.KwargsArray PythonModel.Kwargs PythonModel.UpdateKwargs(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StationaryTransitions() Constructs a new instance of the PythonModel class. public StationaryTransitions() StationaryTransitions(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public StationaryTransitions(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties LogPs The Log Ps of the transitions. public double[,] LogPs { get; set; } Property Value double[,] Params The parameters that are used to define the model. [JsonProperty] [Browsable(false)] public override object[] Params { get; } Property Value object[] TransitionsModelType The type of Transitions model. [JsonProperty] [JsonConverter(typeof(TransitionsModelTypeJsonConverter))] [Browsable(false)] public override TransitionsModelType TransitionsModelType { get; } Property Value TransitionsModelType Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of StationaryTransitions objects. public IObservable<StationaryTransitions> Process() Returns IObservable<StationaryTransitions> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of StationaryTransitions objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<StationaryTransitions> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<StationaryTransitions> UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.StickyTransitions.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.StickyTransitions.html",
    "title": "Class StickyTransitions | Bonsai.ML",
    "keywords": "Class StickyTransitions Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents an operator that is used to create and transform an observable sequence of StickyTransitions objects. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] [JsonObject(MemberSerialization.OptIn)] public class StickyTransitions : TransitionsModel Inheritance object PythonStringBuilder PythonModel TransitionsModel StickyTransitions Inherited Members TransitionsModel.ModelName TransitionsModel.ModelType PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StickyTransitions() Constructs a new instance of the PythonModel class. public StickyTransitions() StickyTransitions(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public StickyTransitions(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties Alpha The alpha parameter. public double Alpha { get; set; } Property Value double Kappa The kappa parameter. public double Kappa { get; set; } Property Value double Kwargs The dictionary of keyword arguments that are used to construct the model. [JsonProperty] public override Dictionary<string, object> Kwargs { get; } Property Value Dictionary<string, object> KwargsArray public static string[] KwargsArray { get; } Property Value string[] LogPs The Log Ps of the transitions. public double[,] LogPs { get; set; } Property Value double[,] Params The parameters that are used to define the model. [JsonProperty] [Browsable(false)] public override object[] Params { get; } Property Value object[] TransitionsModelType The type of Transitions model. [JsonProperty] [JsonConverter(typeof(TransitionsModelTypeJsonConverter))] [Browsable(false)] public override TransitionsModelType TransitionsModelType { get; } Property Value TransitionsModelType Methods CheckKwargs(params object[]) Checks if the keyword arguments are valid. protected override void CheckKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. CheckParams(params object[]) Checks if the parameters are valid. protected override void CheckParams(params object[] @params) Parameters params object[] The parameters. Process() Returns an observable sequence of StickyTransitions objects. public IObservable<StickyTransitions> Process() Returns IObservable<StickyTransitions> Process(IObservable<PyObject>) Transforms an observable sequence of Python.Runtime.PyObject into an observable sequence of StickyTransitions objects by accessing internal attributes of the Python.Runtime.PyObject. public IObservable<StickyTransitions> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<StickyTransitions> UpdateKwargs(params object[]) Updates the kwargs dictionary. protected override void UpdateKwargs(params object[] kwargs) Parameters kwargs object[] The keyword arguments. UpdateParams(params object[]) Updates the parameters. protected override void UpdateParams(params object[] @params) Parameters params object[] The parameters."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModel.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModel.html",
    "title": "Class TransitionsModel | Bonsai.ML",
    "keywords": "Class TransitionsModel Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll An abstract class for creating a Transitions model. public abstract class TransitionsModel : PythonModel Inheritance object PythonStringBuilder PythonModel TransitionsModel Derived ConstrainedStationaryTransitions NeuralNetworkRecurrentTransitions StationaryTransitions StickyTransitions Inherited Members PythonModel.Params PythonModel.KwargsArray PythonModel.Kwargs PythonModel.CheckKwargs(params object[]) PythonModel.UpdateKwargs(params object[]) PythonModel.CheckParams(params object[]) PythonModel.UpdateParams(params object[]) PythonModel.BuildString() PythonStringBuilder.StringBuilder PythonStringBuilder.UpdateString() PythonStringBuilder.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors TransitionsModel() Constructs a new instance of the PythonModel class. public TransitionsModel() TransitionsModel(params object[]) Initializes a new instance of the PythonModel class using keyword arguments. public TransitionsModel(params object[] kwargs) Parameters kwargs object[] The keyword arguments. Properties ModelName The name of the base python model class. [Browsable(false)] protected override string ModelName { get; } Property Value string ModelType The specific type of the model. [Browsable(false)] protected override string ModelType { get; } Property Value string TransitionsModelType The type of Transitions model. public abstract TransitionsModelType TransitionsModelType { get; } Property Value TransitionsModelType"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelLookup.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelLookup.html",
    "title": "Class TransitionsModelLookup | Bonsai.ML",
    "keywords": "Class TransitionsModelLookup Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll A lookup class for relating different TransitionsModelType to TransitionsModel and their corresponding Python string representations. public static class TransitionsModelLookup Inheritance object TransitionsModelLookup Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetFromString(string) Gets the TransitionsModelType corresponding to the given Python string representation. public static TransitionsModelType GetFromString(string value) Parameters value string Returns TransitionsModelType GetFromType(Type) Gets the TransitionsModelType corresponding to the given Type of TransitionsModel . public static TransitionsModelType GetFromType(Type type) Parameters type Type Returns TransitionsModelType GetString(TransitionsModelType) Gets the Python string representation of the given TransitionsModelType. public static string GetString(TransitionsModelType type) Parameters type TransitionsModelType Returns string GetTransitionsClassType(TransitionsModelType) Gets the Type of the TransitionsModel corresponding to the given TransitionsModelType. public static Type GetTransitionsClassType(TransitionsModelType type) Parameters type TransitionsModelType Returns Type"
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelType.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelType.html",
    "title": "Enum TransitionsModelType | Bonsai.ML",
    "keywords": "Enum TransitionsModelType Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Represents the type of transitions in a hidden Markov model. public enum TransitionsModelType Fields ConstrainedStationary = 1 Constrained stationary transitions. NeuralNetworkRecurrent = 3 Neural network recurrent transitions. Stationary = 0 Stationary transitions. Sticky = 2 Sticky transitions."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelTypeJsonConverter.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.TransitionsModelTypeJsonConverter.html",
    "title": "Class TransitionsModelTypeJsonConverter | Bonsai.ML",
    "keywords": "Class TransitionsModelTypeJsonConverter Namespace Bonsai.ML.HiddenMarkovModels.Transitions Assembly Bonsai.ML.HiddenMarkovModels.dll Provides a type converter to convert between TransitionsModelType and the corresponding Python string representation. public class TransitionsModelTypeJsonConverter : JsonConverter<TransitionsModelType> Inheritance object JsonConverter JsonConverter<TransitionsModelType> TransitionsModelTypeJsonConverter Inherited Members JsonConverter<TransitionsModelType>.WriteJson(JsonWriter, object, JsonSerializer) JsonConverter<TransitionsModelType>.ReadJson(JsonReader, Type, object, JsonSerializer) JsonConverter<TransitionsModelType>.CanConvert(Type) JsonConverter.CanRead JsonConverter.CanWrite object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ReadJson(JsonReader, Type, TransitionsModelType, bool, JsonSerializer) Reads the JSON representation of the object. public override TransitionsModelType ReadJson(JsonReader reader, Type objectType, TransitionsModelType existingValue, bool hasExistingValue, JsonSerializer serializer) Parameters reader JsonReader The Newtonsoft.Json.JsonReader to read from. objectType Type Type of the object. existingValue TransitionsModelType The existing value of object being read. If there is no existing value then null will be used. hasExistingValue bool The existing value has a value. serializer JsonSerializer The calling serializer. Returns TransitionsModelType The object value. WriteJson(JsonWriter, TransitionsModelType, JsonSerializer) Writes the JSON representation of the object. public override void WriteJson(JsonWriter writer, TransitionsModelType value, JsonSerializer serializer) Parameters writer JsonWriter The Newtonsoft.Json.JsonWriter to write to. value TransitionsModelType The value. serializer JsonSerializer The calling serializer."
  },
  "api/Bonsai.ML.HiddenMarkovModels.Transitions.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.Transitions.html",
    "title": "Namespace Bonsai.ML.HiddenMarkovModels.Transitions | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.HiddenMarkovModels.Transitions Classes ConstrainedStationaryTransitions Represents an operator that is used to create and transform an observable sequence of ConstrainedStationaryTransitions objects. NeuralNetworkRecurrentTransitions Represents an operator that is used to create and transform an observable sequence of NeuralNetworkRecurrentTransitions objects. StationaryTransitions Represents an operator that is used to create and transform an observable sequence of StationaryTransitions objects. StickyTransitions Represents an operator that is used to create and transform an observable sequence of StickyTransitions objects. TransitionsModel An abstract class for creating a Transitions model. TransitionsModelLookup A lookup class for relating different TransitionsModelType to TransitionsModel and their corresponding Python string representations. TransitionsModelTypeJsonConverter Provides a type converter to convert between TransitionsModelType and the corresponding Python string representation. Enums NonlinearityType Represents the type of nonlinearity to use in a recurrent neural network. TransitionsModelType Represents the type of transitions in a hidden Markov model."
  },
  "api/Bonsai.ML.HiddenMarkovModels.html": {
    "href": "api/Bonsai.ML.HiddenMarkovModels.html",
    "title": "Namespace Bonsai.ML.HiddenMarkovModels | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.HiddenMarkovModels Classes DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. ModelParameters Represents the model parameters of a Hidden Markov Model (HMM). ModelParametersJsonConverter Provides a type converter to convert between ModelParameters and a JSON string representation. PythonModel An abstract class for creating a Python model. PythonStringBuilder Provides a base class for building string representations of Python objects. SerializeToJson Serializes a sequence of data model objects into JSON strings. StateParameters Represents the state parameters of a Hidden Markov Model (HMM). StateParametersJsonConverter Provides a type converter to convert between StateParameters and a JSON string representation. StateProbability Represents the probabilities of being in each state of a Hidden Markov Model (HMM) given the observation."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.DeserializeFromJson.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.DeserializeFromJson.html",
    "title": "Class DeserializeFromJson | Bonsai.ML",
    "keywords": "Class DeserializeFromJson Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Deserializes a sequence of JSON strings into data model objects. [WorkflowElementCategory(ElementCategory.Transform)] public class DeserializeFromJson : SingleArgumentExpressionBuilder, IExpressionBuilder Inheritance object ExpressionBuilder SingleArgumentExpressionBuilder DeserializeFromJson Implements IExpressionBuilder Inherited Members SingleArgumentExpressionBuilder.ArgumentRange ExpressionBuilder.ToString() ExpressionBuilder.Unwrap(ExpressionBuilder) ExpressionBuilder.GetWorkflowElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerElement(ExpressionBuilder) ExpressionBuilder.GetVisualizerMappings(ExpressionBuilder) ExpressionBuilder.FromWorkflowElement(object, ElementCategory) ExpressionBuilder.GetElementDisplayName(Type) ExpressionBuilder.GetElementDisplayName(object) object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors DeserializeFromJson() Initializes a new instance of the DeserializeFromJson class. public DeserializeFromJson() Properties Type Gets or sets the type of the object to deserialize. public TypeMapping Type { get; set; } Property Value TypeMapping Methods Build(IEnumerable<Expression>) Constructs an Expression node from a collection of input arguments. The result can be chained with other builders in a workflow. public override Expression Build(IEnumerable<Expression> arguments) Parameters arguments IEnumerable<Expression> A collection of Expression nodes representing the input arguments. Returns Expression The constructed Expression node."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastImageOverlay.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastImageOverlay.html",
    "title": "Class ForecastImageOverlay | Bonsai.ML",
    "keywords": "Class ForecastImageOverlay Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of an ImageMashupVisualizer. public class ForecastImageOverlay : DialogTypeVisualizer Inheritance object DialogTypeVisualizer ForecastImageOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastPlotOverlay.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastPlotOverlay.html",
    "title": "Class ForecastPlotOverlay | Bonsai.ML",
    "keywords": "Class ForecastPlotOverlay Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model alongside the kinematic state. public class ForecastPlotOverlay : DialogTypeVisualizer Inheritance object DialogTypeVisualizer ForecastPlotOverlay Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastVisualizer.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.ForecastVisualizer.html",
    "title": "Class ForecastVisualizer | Bonsai.ML",
    "keywords": "Class ForecastVisualizer Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a type visualizer to display the forecast of a Kalman Filter kinematics model. public class ForecastVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer ForecastVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.Show(DateTime, object) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.KinematicStateVisualizer.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.KinematicStateVisualizer.html",
    "title": "Class KinematicStateVisualizer | Bonsai.ML",
    "keywords": "Class KinematicStateVisualizer Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a type visualizer to display the state components of a Kalman Filter Kinematics model. public class KinematicStateVisualizer : MashupVisualizer Inheritance object DialogTypeVisualizer MashupVisualizer KinematicStateVisualizer Inherited Members MashupVisualizer.LoadMashups(IServiceProvider) MashupVisualizer.UnloadMashups() MashupVisualizer.GetMashupSource(int, int) MashupVisualizer.MashupSources DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) public void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> Unload() Unloads all type visualizer resources. public override void Unload() Visualize(IObservable<IObservable<object>>, IServiceProvider) Creates an observable sequence used to visualize all notifications emitted by a workflow operator, using this type visualizer and the specified service provider. public override IObservable<object> Visualize(IObservable<IObservable<object>> source, IServiceProvider provider) Parameters source IObservable<IObservable<object>> An observable sequence that multicasts notifications from all the active subscriptions to the workflow operator. provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Returns IObservable<object> An observable sequence where every notification updates the type visualizer object in the UI thread."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.MultivariatePDFVisualizer.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.MultivariatePDFVisualizer.html",
    "title": "Class MultivariatePDFVisualizer | Bonsai.ML",
    "keywords": "Class MultivariatePDFVisualizer Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a type visualizer to display a multivariate probability distribution as a heatmap. public class MultivariatePDFVisualizer : DialogTypeVisualizer Inheritance object DialogTypeVisualizer MultivariatePDFVisualizer Inherited Members DialogTypeVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties PaletteSelectedIndex Gets or sets the selected index of the color palette to use. public int PaletteSelectedIndex { get; set; } Property Value int RenderMethodSelectedIndex Gets or sets the selected index of the render method to use. public int RenderMethodSelectedIndex { get; set; } Property Value int Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.StateComponentVisualizer.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.StateComponentVisualizer.html",
    "title": "Class StateComponentVisualizer | Bonsai.ML",
    "keywords": "Class StateComponentVisualizer Namespace Bonsai.ML.LinearDynamicalSystems.Design Assembly Bonsai.ML.LinearDynamicalSystems.Design.dll Provides a type visualizer to display the state components of a Kalman Filter kinematics model. public class StateComponentVisualizer : BufferedVisualizer Inheritance object DialogTypeVisualizer BufferedVisualizer StateComponentVisualizer Inherited Members BufferedVisualizer.Visualize(IObservable<IObservable<object>>, IServiceProvider) BufferedVisualizer.TargetInterval DialogTypeVisualizer.SequenceCompleted() object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties AreaSeriesColor Gets or sets the color to use for the area series. public OxyColor? AreaSeriesColor { get; set; } Property Value OxyColor? BufferData Gets or sets a boolean value that determines whether to buffer the data beyond the capacity. public bool BufferData { get; set; } Property Value bool Capacity Gets or sets the amount of time in seconds that should be shown along the x axis. public int Capacity { get; set; } Property Value int Label Gets or sets the optional label to prepend to the line and area series names. public string Label { get; set; } Property Value string LineSeriesColor Gets or sets the color to use for the line series. public OxyColor? LineSeriesColor { get; set; } Property Value OxyColor? Methods Load(IServiceProvider) Loads type visualizer resources using the specified service provider. public override void Load(IServiceProvider provider) Parameters provider IServiceProvider A service provider object which can be used to obtain visualization, runtime inspection, or other editing services. Show(DateTime, object) Updates the type visualizer to display a buffered value object received at the specified time. protected override void Show(DateTime time, object value) Parameters time DateTime The time at which the value was received. value object The value to visualize. Show(object) Updates the type visualizer to display the specified value object. public override void Show(object value) Parameters value object The value to visualize. ShowBuffer(IList<Timestamped<object>>) Updates the type visualizer with a new buffer of timestamped values. protected override void ShowBuffer(IList<Timestamped<object>> values) Parameters values IList<Timestamped<object>> A buffer of timestamped values where each timestamp indicates the time at which the value was received. Unload() Unloads all type visualizer resources. public override void Unload()"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Design.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Design.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems.Design | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems.Design Classes ForecastImageOverlay Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model overtime of an ImageMashupVisualizer. ForecastPlotOverlay Provides a mashup visualizer to display the forecast of a Kalman Filter kinematics model alongside the kinematic state. ForecastVisualizer Provides a type visualizer to display the forecast of a Kalman Filter kinematics model. KinematicStateVisualizer Provides a type visualizer to display the state components of a Kalman Filter Kinematics model. MultivariatePDFVisualizer Provides a type visualizer to display a multivariate probability distribution as a heatmap. StateComponentVisualizer Provides a type visualizer to display the state components of a Kalman Filter kinematics model."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Forecast.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Forecast.html",
    "title": "Class Forecast | Bonsai.ML",
    "keywords": "Class Forecast Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator for converting forecasts from a Kalman Filter Kinematics python class into a list of forecasted results. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Forecast Inheritance object Forecast Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ForecastResults Gets or sets the list of forecast results. [JsonProperty(\"forecasts\")] public List<ForecastResult> ForecastResults { get; } Property Value List<ForecastResult> Methods Process(IObservable<PyObject>) Converts a PyObject representing a Kalman Filter forecast into a Forecast class representing a list of forecasted results. public IObservable<Forecast> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<Forecast>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.ForecastResult.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.ForecastResult.html",
    "title": "Class ForecastResult | Bonsai.ML",
    "keywords": "Class ForecastResult Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Forecast result representing a collection of forecasted states at future timesteps public class ForecastResult Inheritance object ForecastResult Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ForecastResult(KinematicState, TimeSpan) Initializes a new instance of the ForecastResult class. public ForecastResult(KinematicState kinematicState, TimeSpan timestep) Parameters kinematicState KinematicState The kinematic state of the forecasted result. timestep TimeSpan The future timestep of the forecasted result. Properties KinematicState Gets or privately sets the kinematic state of the forecasted result. public KinematicState KinematicState { get; } Property Value KinematicState Timestep Gets or privately sets the future time step of the forecasted result. public TimeSpan Timestep { get; } Property Value TimeSpan"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KFModelParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KFModelParameters.html",
    "title": "Class KFModelParameters | Bonsai.ML",
    "keywords": "Class KFModelParameters Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Model parameters for a Kalman Filter Kinematics python class [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class KFModelParameters Inheritance object KFModelParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KFModelParameters() Initializes a new instance of the KFModelParameters class. public KFModelParameters() Properties Acc_x0 x acceleration at time 0 [JsonProperty(\"acc_x0\")] public double Acc_x0 { get; set; } Property Value double Acc_y0 x velocity at time 0 [JsonProperty(\"acc_y0\")] public double Acc_y0 { get; set; } Property Value double Fps frames per second [JsonProperty(\"fps\")] public int Fps { get; set; } Property Value int Pos_x0 x position at time 0 [JsonProperty(\"pos_x0\")] public double Pos_x0 { get; set; } Property Value double Pos_y0 y position at time 0 [JsonProperty(\"pos_y0\")] public double Pos_y0 { get; set; } Property Value double Sigma_a covariance of a [JsonProperty(\"sigma_a\")] public double Sigma_a { get; set; } Property Value double Sigma_x covariance of x [JsonProperty(\"sigma_x\")] public double Sigma_x { get; set; } Property Value double Sigma_y covariance of y [JsonProperty(\"sigma_y\")] public double Sigma_y { get; set; } Property Value double Sqrt_diag_V0_value v0 [JsonProperty(\"sqrt_diag_V0_value\")] public double Sqrt_diag_V0_value { get; set; } Property Value double Vel_x0 x velocity at time 0 [JsonProperty(\"vel_x0\")] public double Vel_x0 { get; set; } Property Value double Vel_y0 y velocity at time 0 [JsonProperty(\"vel_y0\")] public double Vel_y0 { get; set; } Property Value double Methods Process() Generates parameters for a Kalman Filter Kinematics Model public IObservable<KFModelParameters> Process() Returns IObservable<KFModelParameters> Process(IObservable<PyObject>) Gets the model parameters from a PyObject of a Kalman Filter Kinematics Model public IObservable<KFModelParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<KFModelParameters> Process<TSource>(IObservable<TSource>) Generates parameters for a Kalman Filter Kinematics Model on each input public IObservable<KFModelParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<KFModelParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicComponent.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicComponent.html",
    "title": "Class KinematicComponent | Bonsai.ML",
    "keywords": "Class KinematicComponent Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll State components of a Kalman Filter Kinematics model public class KinematicComponent Inheritance object KinematicComponent Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Covariance covariance between state components [JsonProperty(\"covariance\")] public double Covariance { get; set; } Property Value double X x state component [JsonProperty(\"x_state_component\")] public StateComponent X { get; set; } Property Value StateComponent Y y state component [JsonProperty(\"y_state_component\")] public StateComponent Y { get; set; } Property Value StateComponent"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicState.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.KinematicState.html",
    "title": "Class KinematicState | Bonsai.ML",
    "keywords": "Class KinematicState Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that converts the full state of a Kalman filter model into a KinematicState class representing position, velocity, and acceleration. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class KinematicState Inheritance object KinematicState Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KinematicState() Initializes a new instance of the KinematicState class public KinematicState() KinematicState(State) Initializes a new instance of the KinematicState class from the full state of a Kalman filter model. public KinematicState(State state) Parameters state State Properties Acceleration Gets or sets the acceleration kinematic component. [JsonProperty(\"acceleration\")] public KinematicComponent Acceleration { get; set; } Property Value KinematicComponent Position Gets or sets the position kinematic component. [JsonProperty(\"position\")] public KinematicComponent Position { get; set; } Property Value KinematicComponent Velocity Gets or sets the velocity kinematic component. [JsonProperty(\"velocity\")] public KinematicComponent Velocity { get; set; } Property Value KinematicComponent Methods Process(IObservable<State>) Converts the full state of a Kalman filter (mean vector and covariance matrix) into a KinematicState object representing position, velocity, and acceleration public IObservable<KinematicState> Process(IObservable<State> source) Parameters source IObservable<State> Returns IObservable<KinematicState>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Observation2D.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.Observation2D.html",
    "title": "Class Observation2D | Bonsai.ML",
    "keywords": "Class Observation2D Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Assembly Bonsai.ML.LinearDynamicalSystems.dll Observation2D of data used by Kalman Filter python class (point(x, y)) [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class Observation2D Inheritance object Observation2D Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties X x coordinate [JsonProperty(\"x\")] public double X { get; set; } Property Value double Y y coordinate [JsonProperty(\"y\")] public double Y { get; set; } Property Value double Methods Process() Generates a 2D observation public IObservable<Observation2D> Process() Returns IObservable<Observation2D> Process<TSource>(IObservable<TSource>) Generates a 2D observation on each input public IObservable<Observation2D> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<Observation2D> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Kinematics.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems.Kinematics Classes Forecast Represents an operator for converting forecasts from a Kalman Filter Kinematics python class into a list of forecasted results. ForecastResult Forecast result representing a collection of forecasted states at future timesteps KFModelParameters Model parameters for a Kalman Filter Kinematics python class KinematicComponent State components of a Kalman Filter Kinematics model KinematicState Represents an operator that converts the full state of a Kalman filter model into a KinematicState class representing position, velocity, and acceleration. Observation2D Observation2D of data used by Kalman Filter python class (point(x, y))"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.GridParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.GridParameters.html",
    "title": "Class GridParameters | Bonsai.ML",
    "keywords": "Class GridParameters Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that creates the 2D grid parameters used for calculating the PDF of a multivariate distribution. [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class GridParameters Inheritance object GridParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties X0 Gets or sets the lower bound of the X axis. [JsonProperty(\"x0\")] public double X0 { get; set; } Property Value double X1 Gets or sets the upper bound of the X axis. [JsonProperty(\"x1\")] public double X1 { get; set; } Property Value double XSteps Gets or sets the number of steps along the X axis. [JsonProperty(\"xsteps\")] public int XSteps { get; set; } Property Value int Y0 Gets or sets the lower bound of the Y axis. [JsonProperty(\"y0\")] public double Y0 { get; set; } Property Value double Y1 Gets or sets the upper bound of the Y axis. [JsonProperty(\"y1\")] public double Y1 { get; set; } Property Value double YSteps Gets or sets the number of steps along the Y axis. [JsonProperty(\"ysteps\")] public int YSteps { get; set; } Property Value int Methods ConvertPyObject(PyObject) Converts a PyObject, represeting a Kalman Filter Linear Regression Model, into a GridParameters object public static GridParameters ConvertPyObject(PyObject pyObject) Parameters pyObject PyObject Returns GridParameters Process() Generates grid parameters public IObservable<GridParameters> Process() Returns IObservable<GridParameters> Process(IObservable<PyObject>) Gets the grid parameters from a PyObject of a Kalman Filter Linear Regression Model public IObservable<GridParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<GridParameters> Process<TSource>(IObservable<TSource>) Generates grid parameters on each input public IObservable<GridParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<GridParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.KFModelParameters.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.KFModelParameters.html",
    "title": "Class KFModelParameters | Bonsai.ML",
    "keywords": "Class KFModelParameters Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that creates the model parameters for a Kalman Filter Linear Regression python class [Combinator] [WorkflowElementCategory(ElementCategory.Source)] public class KFModelParameters Inheritance object KFModelParameters Inherited Members object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors KFModelParameters() Constructs a KF Model Parameters class. public KFModelParameters() Properties LikelihoodPrecisionCoefficient Gets or sets the likelihood precision coefficient. [JsonProperty(\"likelihood_precision_coef\")] public double LikelihoodPrecisionCoefficient { get; set; } Property Value double NumFeatures Gets or sets the number of features present in the model. [JsonProperty(\"n_features\")] public int NumFeatures { get; set; } Property Value int P Gets or sets the matrix representing the covariance between state components. [JsonProperty(\"P\")] public double[,] P { get; set; } Property Value double[,] PriorPrecisionCoefficient Gets or sets the prior precision coefficient. [JsonProperty(\"prior_precision_coef\")] public double PriorPrecisionCoefficient { get; set; } Property Value double X Gets or sets the matrix representing the mean of the state. [JsonProperty(\"x\")] public double[,] X { get; set; } Property Value double[,] Methods Process() Generates parameters for a Kalman Filter Linear Regression Model public IObservable<KFModelParameters> Process() Returns IObservable<KFModelParameters> Process(IObservable<PyObject>) Gets the model parameters from a PyObject of a Kalman Filter Linear Regression Model public IObservable<KFModelParameters> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<KFModelParameters> Process<TSource>(IObservable<TSource>) Generates parameters for a Kalman Filter Linear Regression Model on each input public IObservable<KFModelParameters> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<KFModelParameters> Type Parameters TSource ToString() Returns a string that represents the current object. public override string ToString() Returns string A string that represents the current object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.MultivariatePDF.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.MultivariatePDF.html",
    "title": "Class MultivariatePDF | Bonsai.ML",
    "keywords": "Class MultivariatePDF Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that converts a python object, representing a multivariate PDF, into a multivariate PDF class. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class MultivariatePDF Inheritance object MultivariatePDF Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Fields GridParameters Gets or sets the grid parameters used for generating the multivariate PDF. public GridParameters GridParameters Field Value GridParameters Values Gets or sets the probability density value at each 2D position of the grid. public double[,] Values Field Value double[,] Methods Process(IObservable<PyObject>) Converts a PyObject into a multivariate PDF. public IObservable<MultivariatePDF> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<MultivariatePDF>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.LinearRegression.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems.LinearRegression Classes GridParameters Represents an operator that creates the 2D grid parameters used for calculating the PDF of a multivariate distribution. KFModelParameters Represents an operator that creates the model parameters for a Kalman Filter Linear Regression python class MultivariatePDF Represents an operator that converts a python object, representing a multivariate PDF, into a multivariate PDF class."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Reshape.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Reshape.html",
    "title": "Class Reshape | Bonsai.ML",
    "keywords": "Class Reshape Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that reshapes the dimensions of a 2D multi-dimensional array. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Reshape Inheritance object Reshape Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties Cols Gets or sets the number of columns in the reshaped array. public int Cols { get; set; } Property Value int Rows Gets or sets the number of rows in the reshaped array. public int Rows { get; set; } Property Value int Methods Process(IObservable<double[,]>) Reshapes a 2D multi-dimensional array into a new multi-dimensional array with the provided number of rows and columns. public IObservable<double[,]> Process(IObservable<double[,]> source) Parameters source IObservable<double[,]> Returns IObservable<double[,]>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.SerializeToJson.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.SerializeToJson.html",
    "title": "Class SerializeToJson | Bonsai.ML",
    "keywords": "Class SerializeToJson Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Serializes a sequence of data model objects into JSON strings. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class SerializeToJson Inheritance object SerializeToJson Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process(IObservable<KFModelParameters>) Serializes each KFModelParameters object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KFModelParameters> source) Parameters source IObservable<KFModelParameters> A sequence of KFModelParameters objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KFModelParameters object. Process(IObservable<KinematicComponent>) Serializes each KinematicComponent object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KinematicComponent> source) Parameters source IObservable<KinematicComponent> A sequence of KinematicComponent objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KinematicComponent object. Process(IObservable<KinematicState>) Serializes each KinematicState object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KinematicState> source) Parameters source IObservable<KinematicState> A sequence of KinematicState objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KinematicState object. Process(IObservable<Observation2D>) Serializes each Observation2D object in the sequence to a JSON string. public IObservable<string> Process(IObservable<Observation2D> source) Parameters source IObservable<Observation2D> A sequence of Observation2D objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding Observation2D object. Process(IObservable<KFModelParameters>) Serializes each KFModelParameters object in the sequence to a JSON string. public IObservable<string> Process(IObservable<KFModelParameters> source) Parameters source IObservable<KFModelParameters> A sequence of KFModelParameters objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding KFModelParameters object. Process(IObservable<StateComponent>) Serializes each StateComponent object in the sequence to a JSON string. public IObservable<string> Process(IObservable<StateComponent> source) Parameters source IObservable<StateComponent> A sequence of StateComponent objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding StateComponent object. Process(IObservable<State>) Serializes each State object in the sequence to a JSON string. public IObservable<string> Process(IObservable<State> source) Parameters source IObservable<State> A sequence of State objects. Returns IObservable<string> A sequence of JSON strings representing the corresponding State object."
  },
  "api/Bonsai.ML.LinearDynamicalSystems.Slice.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.Slice.html",
    "title": "Class Slice | Bonsai.ML",
    "keywords": "Class Slice Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll Represents an operator that slices a 2D multi-dimensional array. [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class Slice Inheritance object Slice Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties ColEnd Gets or sets the index to stop slicing the columns of the array. A value of null indicates the last column of the array. public int? ColEnd { get; set; } Property Value int? ColStart Gets or sets the index to begin slicing the columns of the array. A value of null indicates the first column of the array. public int? ColStart { get; set; } Property Value int? RowEnd Gets or sets the index to stop slicing the rows of the array. A value of null indicates the last row of the array. public int? RowEnd { get; set; } Property Value int? RowStart Gets or sets the index to begin slicing the rows of the array. A value of null indicates the first row of the array. public int? RowStart { get; set; } Property Value int? Methods Process(IObservable<double[,]>) Slices a 2D multi-dimensional array into a new multi-dimensional array by extracting elements between the provided start and end indices of the rows and columns. public IObservable<double[,]> Process(IObservable<double[,]> source) Parameters source IObservable<double[,]> Returns IObservable<double[,]>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.State.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.State.html",
    "title": "Class State | Bonsai.ML",
    "keywords": "Class State Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll State of a Kalman Filter (mean vector and covariance matrix) [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class State Inheritance object State Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Properties P Covariance matrix - n x n dimensional matrix where n is number of features [JsonProperty(\"P\")] public double[,] P { get; set; } Property Value double[,] X Mean vector - n x 1 dimensional matrix where n is number of features [JsonProperty(\"x\")] public double[,] X { get; set; } Property Value double[,] Methods Process(IObservable<PyObject>) Grabs the state of a Kalman Filter from a type of PyObject /// public IObservable<State> Process(IObservable<PyObject> source) Parameters source IObservable<PyObject> Returns IObservable<State>"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.StateComponent.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.StateComponent.html",
    "title": "Class StateComponent | Bonsai.ML",
    "keywords": "Class StateComponent Namespace Bonsai.ML.LinearDynamicalSystems Assembly Bonsai.ML.LinearDynamicalSystems.dll State component of a Kalman Filter public class StateComponent Inheritance object StateComponent Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StateComponent() Initializes a new instance of the StateComponent class. public StateComponent() StateComponent(double[,], double[,], int) Initializes a new instance of the StateComponent class from the full state and covariance matrices given an index public StateComponent(double[,] X, double[,] P, int i) Parameters X double[,] P double[,] i int Properties Mean mean [JsonProperty(\"mean\")] public double Mean { get; set; } Property Value double Variance variance [JsonProperty(\"variance\")] public double Variance { get; set; } Property Value double Methods Process() Generates a state component public IObservable<StateComponent> Process() Returns IObservable<StateComponent> Process<TSource>(IObservable<TSource>) Generates a state component public IObservable<StateComponent> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<StateComponent> Type Parameters TSource"
  },
  "api/Bonsai.ML.LinearDynamicalSystems.html": {
    "href": "api/Bonsai.ML.LinearDynamicalSystems.html",
    "title": "Namespace Bonsai.ML.LinearDynamicalSystems | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.LinearDynamicalSystems Classes DeserializeFromJson Deserializes a sequence of JSON strings into data model objects. Reshape Represents an operator that reshapes the dimensions of a 2D multi-dimensional array. SerializeToJson Serializes a sequence of data model objects into JSON strings. Slice Represents an operator that slices a 2D multi-dimensional array. State State of a Kalman Filter (mean vector and covariance matrix) StateComponent State component of a Kalman Filter"
  },
  "api/Bonsai.ML.ModelReference.html": {
    "href": "api/Bonsai.ML.ModelReference.html",
    "title": "Class ModelReference | Bonsai.ML",
    "keywords": "Class ModelReference Namespace Bonsai.ML Assembly Bonsai.ML.dll Bonsai.ML model reference base class public class ModelReference Inheritance object ModelReference Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors ModelReference(string) Initializes a new instance of the ModelReference class with the specified name. public ModelReference(string name) Parameters name string The name of the referenced model. Properties Name Gets or sets the name of the referenced model. public string Name { get; set; } Property Value string"
  },
  "api/Bonsai.ML.Python.FormatToPython.html": {
    "href": "api/Bonsai.ML.Python.FormatToPython.html",
    "title": "Class FormatToPython | Bonsai.ML",
    "keywords": "Class FormatToPython Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll Represents an operator that can convert an object into a properly formatted string that is consistent with python syntax. For example, a tuple (1, 2, 3) will be converted to the string \"(1, 2, 3)\". A list of [0, 1, 2] will be converted to the string \"[0, 1, 2]\". [Combinator] [WorkflowElementCategory(ElementCategory.Transform)] public class FormatToPython Inheritance object FormatToPython Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods Process<TSource>(IObservable<TSource>) Transforms the elements of an observable sequence into a properly formatted string that is consistent with python syntax. public IObservable<string> Process<TSource>(IObservable<TSource> source) Parameters source IObservable<TSource> Returns IObservable<string> Type Parameters TSource"
  },
  "api/Bonsai.ML.Python.NumpyHelper.NumpyArrayInterface.html": {
    "href": "api/Bonsai.ML.Python.NumpyHelper.NumpyArrayInterface.html",
    "title": "Class NumpyHelper.NumpyArrayInterface | Bonsai.ML",
    "keywords": "Class NumpyHelper.NumpyArrayInterface Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll Represents a NumPy array interface for interacting with Python.Runtime.PyObject representing NumPy arrays. public class NumpyHelper.NumpyArrayInterface Inheritance object NumpyHelper.NumpyArrayInterface Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors NumpyArrayInterface(PyObject) Initializes a new instance of the NumpyHelper.NumpyArrayInterface class. public NumpyArrayInterface(PyObject obj) Parameters obj PyObject Fields Address The memory address of the NumPy array data. public readonly IntPtr Address Field Value IntPtr DataType The C# data type representing the elements of the NumPy array. public readonly Type DataType Field Value Type IsCStyleContiguous A value indicating whether the NumPy array is C-style contiguous. public readonly bool IsCStyleContiguous Field Value bool NBytes The number of bytes in the NumPy array. public readonly int NBytes Field Value int Shape The shape of the NumPy array. public readonly long[] Shape Field Value long[]"
  },
  "api/Bonsai.ML.Python.NumpyHelper.NumpyDataTypes.html": {
    "href": "api/Bonsai.ML.Python.NumpyHelper.NumpyDataTypes.html",
    "title": "Class NumpyHelper.NumpyDataTypes | Bonsai.ML",
    "keywords": "Class NumpyHelper.NumpyDataTypes Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll A custom type converter for NumPy data types. public class NumpyHelper.NumpyDataTypes : StringConverter Inheritance object TypeConverter StringConverter NumpyHelper.NumpyDataTypes Inherited Members StringConverter.CanConvertFrom(ITypeDescriptorContext, Type) StringConverter.ConvertFrom(ITypeDescriptorContext, CultureInfo, object) TypeConverter.CanConvertFrom(Type) TypeConverter.CanConvertTo(Type) TypeConverter.CanConvertTo(ITypeDescriptorContext, Type) TypeConverter.ConvertFrom(object) TypeConverter.ConvertFromInvariantString(string) TypeConverter.ConvertFromInvariantString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(string) TypeConverter.ConvertFromString(ITypeDescriptorContext, string) TypeConverter.ConvertFromString(ITypeDescriptorContext, CultureInfo, string) TypeConverter.ConvertTo(object, Type) TypeConverter.ConvertTo(ITypeDescriptorContext, CultureInfo, object, Type) TypeConverter.ConvertToInvariantString(object) TypeConverter.ConvertToInvariantString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(object) TypeConverter.ConvertToString(ITypeDescriptorContext, object) TypeConverter.ConvertToString(ITypeDescriptorContext, CultureInfo, object) TypeConverter.CreateInstance(IDictionary) TypeConverter.CreateInstance(ITypeDescriptorContext, IDictionary) TypeConverter.GetConvertFromException(object) TypeConverter.GetConvertToException(object, Type) TypeConverter.GetCreateInstanceSupported() TypeConverter.GetCreateInstanceSupported(ITypeDescriptorContext) TypeConverter.GetProperties(object) TypeConverter.GetProperties(ITypeDescriptorContext, object) TypeConverter.GetProperties(ITypeDescriptorContext, object, Attribute[]) TypeConverter.GetPropertiesSupported() TypeConverter.GetPropertiesSupported(ITypeDescriptorContext) TypeConverter.GetStandardValues() TypeConverter.GetStandardValuesExclusive() TypeConverter.GetStandardValuesExclusive(ITypeDescriptorContext) TypeConverter.GetStandardValuesSupported() TypeConverter.IsValid(object) TypeConverter.IsValid(ITypeDescriptorContext, object) TypeConverter.SortProperties(PropertyDescriptorCollection, string[]) object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetStandardValues(ITypeDescriptorContext) Returns a collection of standard values for the data type this type converter is designed for when provided with a format context. public override TypeConverter.StandardValuesCollection GetStandardValues(ITypeDescriptorContext context) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context that can be used to extract additional information about the environment from which this converter is invoked. This parameter or properties of this parameter can be null. Returns TypeConverter.StandardValuesCollection A TypeConverter.StandardValuesCollection that holds a standard set of valid values, or null if the data type does not support a standard set of values. GetStandardValuesSupported(ITypeDescriptorContext) Returns whether this object supports a standard set of values that can be picked from a list, using the specified context. public override bool GetStandardValuesSupported(ITypeDescriptorContext context) Parameters context ITypeDescriptorContext An ITypeDescriptorContext that provides a format context. Returns bool true if GetStandardValues() should be called to find a common set of values the object supports; otherwise, false."
  },
  "api/Bonsai.ML.Python.NumpyHelper.html": {
    "href": "api/Bonsai.ML.Python.NumpyHelper.html",
    "title": "Class NumpyHelper | Bonsai.ML",
    "keywords": "Class NumpyHelper Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll Provides a set of static methods for working with NumPy arrays. public static class NumpyHelper Inheritance object NumpyHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods GetCSharpDataType(string) Gets the C# data type for the specified NumPy data type. public static Type GetCSharpDataType(string str) Parameters str string Returns Type GetNumpyDataType(Type) Gets the NumPy data type for the specified C# type. public static PyObject GetNumpyDataType(Type type) Parameters type Type Returns PyObject InitializeNumpy() Initializes the NumPy module and returns a reference to the module. public static PyObject InitializeNumpy() Returns PyObject IsNumPyArray(PyObject) Checks if the Python.Runtime.PyObject is a type of NumPy array. public static bool IsNumPyArray(PyObject obj) Parameters obj PyObject Returns bool PyObjectToArray(PyObject) Converts a Python.Runtime.PyObject representing a NumPy array to a C# Array. public static Array PyObjectToArray(PyObject array) Parameters array PyObject Returns Array"
  },
  "api/Bonsai.ML.Python.PythonHelper.html": {
    "href": "api/Bonsai.ML.Python.PythonHelper.html",
    "title": "Class PythonHelper | Bonsai.ML",
    "keywords": "Class PythonHelper Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll Provides a set of extension methods for working with Python.Runtime.PyObject instances. public static class PythonHelper Inheritance object PythonHelper Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Methods ConvertPythonObjectToCSharp(PyObject) Converts the specified Python object to a C# object. public static object ConvertPythonObjectToCSharp(PyObject pyObject) Parameters pyObject PyObject The Python object to convert. Returns object The C# object representation of the Python object. GetArrayAttr(PyObject, string) Gets the value of the specified array attribute from the Python object. public static object GetArrayAttr(this PyObject pyObject, string attributeName) Parameters pyObject PyObject The Python object. attributeName string The name of the attribute to retrieve. Returns object The array value of the specified attribute. GetAttr<T>(PyObject, string) Gets the value of the specified attribute from the Python object. public static T GetAttr<T>(this PyObject pyObject, string attributeName) Parameters pyObject PyObject The Python object. attributeName string The name of the attribute to retrieve. Returns T The value of the specified attribute. Type Parameters T The type of the attribute to retrieve."
  },
  "api/Bonsai.ML.Python.StringFormatter.html": {
    "href": "api/Bonsai.ML.Python.StringFormatter.html",
    "title": "Class StringFormatter | Bonsai.ML",
    "keywords": "Class StringFormatter Namespace Bonsai.ML.Python Assembly Bonsai.ML.Python.dll Represents a C# to Python string formatter class. public class StringFormatter Inheritance object StringFormatter Inherited Members object.ToString() object.Equals(object) object.Equals(object, object) object.ReferenceEquals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() Constructors StringFormatter() Initializes a new instance of the StringFormatter class. public StringFormatter() Methods Format(object) Formats the specified object into a string that is consistent with Python syntax. public string Format(object obj) Parameters obj object The object to format. Returns string A string that is consistent with Python syntax. FormatToPython(object) Formats the specified object into a string that is consistent with Python syntax. public static string FormatToPython(object obj) Parameters obj object The object to format. Returns string A string that is consistent with Python syntax."
  },
  "api/Bonsai.ML.Python.html": {
    "href": "api/Bonsai.ML.Python.html",
    "title": "Namespace Bonsai.ML.Python | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML.Python Classes FormatToPython Represents an operator that can convert an object into a properly formatted string that is consistent with python syntax. For example, a tuple (1, 2, 3) will be converted to the string \"(1, 2, 3)\". A list of [0, 1, 2] will be converted to the string \"[0, 1, 2]\". NumpyHelper Provides a set of static methods for working with NumPy arrays. NumpyHelper.NumpyArrayInterface Represents a NumPy array interface for interacting with Python.Runtime.PyObject representing NumPy arrays. NumpyHelper.NumpyDataTypes A custom type converter for NumPy data types. PythonHelper Provides a set of extension methods for working with Python.Runtime.PyObject instances. StringFormatter Represents a C# to Python string formatter class."
  },
  "api/Bonsai.ML.html": {
    "href": "api/Bonsai.ML.html",
    "title": "Namespace Bonsai.ML | Bonsai.ML",
    "keywords": "Namespace Bonsai.ML Classes CreateModelReference Represents an operator that creates a reference for a named model. ModelReference Bonsai.ML model reference base class"
  },
  "articles/HiddenMarkovModels/hmm-getting-started.html": {
    "href": "articles/HiddenMarkovModels/hmm-getting-started.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started The workflow starts with creating a python runtime, followed by loading the ssm package, referred to as the HMM module. After this, you can instantiate the HMM model and pass it observations of data to perform inference. Since this package relies on communication between Bonsai and Python, the observations that the model uses must be formatted into a valid string representation of a Python data type, namely a list of numbers. Workflow flowchart LR A([\"Create Python Runtime\"]) B([\"Load HMM Module\"]) C([\"Create HMM\"]) D([\"Generate Observations\"]) E([\"Infer Hidden State\"]) A --> B B --> C C --> D D --> E Note Due to the way Bonsai.ML interacts with Python, it is necessary for the first two steps to complete before instantiating the model. It is important to know that the initialization of the Python runtime, loading the module, and creating the model takes time to complete, and that only once the model has been created can inference be performed. Implementation Below is a simplified Bonsai workflow that implements the core logic of the package. A CreateRuntime node is used to initialize a python runtime engine, which gets passed to a BehaviorSubject called PythonEngine. Bonsai's CreateRuntime node should automatically detect the python virtual environment if it was activated in the same terminal that was used to launch Bonsai, otherwise the path to the virtual environment can be specified in the CreateRuntime node by setting the PythonHome property. Next, the PythonEngine node is passed to a LoadHMMModule node which will load the ssm package into the python environment. Once the HMM module has been initialized, the CreateHMM node instantiates a python instance of the HMM model. Here, you can specify the initialization parameters of the model and provide a ModelName parameter that gets used to reference the model in other parts of the Bonsai workflow. It is crucial that the Data are formatted into a string that the model can use, namely a string representing a Python list. For example, if you pass a Tuple with 2 items as your data, then the formatter should look something like \"[\" + Item1.ToString() + Item2.ToString() + \"]\". The output of this should be used as your observations into the model, so connect your data source to a Subject named Data and modify the FormatToPython node to fit with your data. Observations are then passed to an InferState node, which will use the specified model (given by the ModelName property) to infer the latent state of the model and outputs the StateProbabilities, or probabilities of being in each state given the observation. Further Examples For further examples and demonstrations for how this package works, see the Bonsai - Machine Learning Examples section."
  },
  "articles/HiddenMarkovModels/hmm-overview.html": {
    "href": "articles/HiddenMarkovModels/hmm-overview.html",
    "title": "Bonsai.ML.HiddenMarkovModels Overview | Bonsai.ML",
    "keywords": "Bonsai.ML.HiddenMarkovModels Overview The HiddenMarkovModels package provides a Bonsai interface to interact with the ssm package. General Guide Since the package relies on both Bonsai and Python, installation steps for both are required. Detailed instructions are provided for installing the package in a new environment, integrating it with existing workflows, and running examples from the example folder. To install the package for integrating with existing workflows, see the Installation Guide. To get started with integrating the package into workflows, see the Getting Started section. To test the specific examples provided, check out the Examples tab. Installation Guide Dependencies To get started, you must install the following tools: Python (v3.10) dotnet-sdk (v8) Git Bonsai-Rx Templates tool Tip Install Python through the standard installer and add to the system PATH. Installation Guide - Windows Creating New Project Environment Open the terminal and create a project folder: cd ~\\Desktop mkdir HiddenMarkovModels cd .\\HiddenMarkovModels Create a Python virtual environment: python -m venv .venv Create a Bonsai environment: dotnet new bonsaienv Python Environment Setup Activate the Python environment: .\\.venv\\Scripts\\activate Install the ssm package: pip install numpy cython pip install ssm@git+https://github.com/lindermanlab/ssm@6c856ad3967941d176eb348bcd490cfaaa08ba60 Verify installation: import ssm Bonsai Environment Setup Launch Bonsai: .bonsai\\Bonsai.exe Install the Bonsai.ML.HiddenMarkovModels package from the Package Manager. Tip You can quickly search for the package by entering Bonsai.ML.HiddenMarkovModels into the search bar. Installation Guide - Linux Creating New Project Environment Create a project folder: cd ~/Desktop mkdir HiddenMarkovModels cd HiddenMarkovModels Create a Python virtual environment: python3 -m venv .venv Tip Install the virtual environment package if needed: sudo apt install python3.10-venv Create a Bonsai environment: dotnet new bonsaienv Note This step uses the Bonsai Linux Environment Template tool for easy creation of bonsai environments on Linux. See this discussion for more information on getting Bonsai running on Linux. Python Environment Setup Activate the Python environment: source .venv/bin/activate Install the ssm package: pip install numpy cython pip install ssm@git+https://github.com/lindermanlab/ssm@6c856ad3967941d176eb348bcd490cfaaa08ba60 Verify installation: import ssm Bonsai Environment Setup Activate and launch Bonsai: source .bonsai/activate bonsai Install the Bonsai.ML.HiddenMarkovModels package from the Package Manager. Tip You can quickly search for the package by entering Bonsai.ML.HiddenMarkovModels into the search bar."
  },
  "articles/LinearDynamicalSystems/lds-getting-started.html": {
    "href": "articles/LinearDynamicalSystems/lds-getting-started.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started This guide shows you how to use the environments created in the previous installation steps to run the package. Depending on your operating system, follow the activating environments in Windows or activating environments in Linux instructions below. Warning These environments are not configured to run the example workflows. To run the examples, you must install the necessary packages or follow the Examples getting started guide to bootstrap the environments directly from the repo provided. Activating environments - Windows Activate the python environment and launch the Bonsai.exe inside the bonsai environment folder using the following: .venv\\Scripts\\activate .bonsai\\Bonsai.exe Activating environments - Linux If you used the Linux environment creation tool, you can activate you bonsai environment the same as you would activate your python virtual environment. You can have both the python and the bonsai environments activated at the same time. Warning The order of activating the environments matters so you must activate the python environment first and the bonsai environment second. source .venv/bin/activate source .bonsai/activate bonsai If you did not use the linux environment template but you plan on using linux, you can simply activate the python environment and then run the bonsai application in the folder using mono. source .venv/bin/activate mono .bonsai/Bonsai.exe General workflow The workflow starts with creating a python runtime, followed by loading the lds_python module. After this, you can instantiate the model and pass it observations of data to perform inference. flowchart LR A([\"Create Python Runtime\"]) B([\"Load LDS Module\"]) C([\"Create KF Model\"]) D([\"Generate Observations\"]) E([\"Perform Inference\"]) A --> B B --> C C --> D D --> E Note Due to the way Bonsai.ML interacts with Python, it is necessary for the first two steps to complete before instantiating the model. It is important to know that the initialization of the Python runtime, loading the module, and creating the model takes time to complete, and that only once the model has been created can inference be performed. Implementing in Bonsai Below is a simplified Bonsai workflow that implements the core logic of the package. A CreateRuntime node is used to initialize a python runtime engine, which gets passed to a BehaviorSubject called PythonEngine. Bonsai's CreateRuntime node should automatically detect the python virtual environment that was used to launch the Bonsai application, otherwise the path to the virtual environment can be specified in the CreateRuntime node by setting the PythonHome property. Next, the PythonEngine node is passed to a LoadLDSModule node which will load the lds_python package into the python environment. Once the LDS module has been initialized, the CreateKFModel node instantiates a python instance of the Kalman Filter Kinematics model. Here, you can specify the initialization parameters of the model and provide a ModelName parameter that gets used to reference the model in other parts of the Bonsai workflow. Next, you would take some tracking data (for example, the centroid of an animal or a 2D point), and pass that to a CreateObservation2D node which will package the data into a data format that the model can use. The Observation is then passed to a PerformInference node, which will use the specified model (given by the ModelName property) to infer the state and output the inferred kinematics. The only thing left to do is pass your behavior data into the BehaviorData subject. To do this, simply connect the output of your 2D data to a Subject named BehaviorData and the model will start converting this data into observations which it can then us to perform inference. Setting model parameters The CreateKFModel node contains a number of properties which can be useful to determine the model dynamics. Further Examples For further examples and demonstrations for how this package works, see the Bonsai - Machine Learning Examples section."
  },
  "articles/LinearDynamicalSystems/lds-installation-guide-linux.html": {
    "href": "articles/LinearDynamicalSystems/lds-installation-guide-linux.html",
    "title": "Installation Guide - Linux | Bonsai.ML",
    "keywords": "Installation Guide - Linux This guide is meant for users to install the package from scratch. To use this package to run the examples, you must install the additional Bonsai packages required to run each Example. Some familiarity with the terminal is necessary. Notes on Installing Bonsai on Linux (Ubuntu) Bonsai on Linux is not as straightforward as installing on Windows and is still being actively tested and optimized. Currently, Bonsai support has only been tested on Ubuntu 22.04. If you wish to try Bonsai on Linux, be sure to read the Linux Installation Guide for important information regarding how to install underlying Bonsai packge dependencies, such as OpenGL, OpenAL, OpenCV, etc., for use in Bonsai workflows. Dependencies To get started, you must install the following tools: Python (v3.10.12) dotnet-sdk (v8) Git Bonsai-Rx Linux Environment Template Warning Be sure to check the python version and dotnet-sdk version to make sure you have the correct version of the tool installed, otherwise the steps in this guide may not work. Creating Virtual Environments Create a folder for your project cd ~/Desktop mkdir LinearDynamicalSystems cd LinearDynamicalSystems Create a python virtual environment. Warning This step uses the virtual env package from python to create a virtual environment. If you run into an error during this step, you may have to install the python virtual env package with sudo apt install python3.10-venv. python3 -m venv .venv Create a bonsai environment. Note This step uses the bonsai linux environment template tool for easy creation of linux environments dotnet new bonsaienvl When prompted, enter yes to run the setup script. Python Environment Setup Guide Activate the python environment source .venv/bin/activate Install the lds_python package pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c If you encounter errors during installation of the lds_python package, you will have to diagnose the issue and install the correct package dependencies manually. Check that the lds_python package has been installed correctly. Launch a python IDE: python Check that you can correctly import the package: import lds If no errors appear when import lds is called in python, your python environment is ready. Exit python with the following command and move onto the next step: exit() Bonsai Environment Setup Guide Activate the bonsai environment and launch bonsai: source .bonsai/activate bonsai Open Bonsai's Package Manager from the startup menu and install the Bonsai.ML.LinearDynamicalSystems bonsai package from the menu. When installing the package, make sure to enter Accept on the prompts when asked to accept Terms and Conditions during installation. You will now have access to Bonsai.ML.LinearDynamicalSystems modules from the Bonsai toolbox. If all of these steps worked for you, head to the section on Getting Started."
  },
  "articles/LinearDynamicalSystems/lds-installation-guide-windows.html": {
    "href": "articles/LinearDynamicalSystems/lds-installation-guide-windows.html",
    "title": "Installation Guide - Windows | Bonsai.ML",
    "keywords": "Installation Guide - Windows This guide is meant for users to install the package from scratch. To run the examples, users must install the additional Bonsai packages required to run each Example. Some familiarity with the command line or powershell terminal is necessary. This guide has only been tested on Windows 10 and 11, so earlier versions of Windows may or may not work. Dependencies To get started, you must install the following tools: Python (v3.10) Note - in order for Bonsai to pick up the python installation, it must be installed through the standard Windows installer (not through the Windows App store) and must be added to the system PATH dotnet-sdk (v8) Git Bonsai-Rx Templates tool Warning Be sure to check the specific python version and dotnet-sdk version you have installed, as different version than the ones we recommend may or may not work with this guide. Creating Virtual Environments Open up the terminal and create a folder for your project. For example: cd ~\\Desktop mkdir LinearDynamicalSystems cd .\\LinearDynamicalSystems Create a python virtual environment inside of your folder. python -m venv .venv Tip If you receive an error that says, python cannot be found, check to ensure that python is available on the system path. If you just installed python, it may be necessary to restart the terminal. Create a bonsai environment. When prompted, enter yes to run the powershell setup script. dotnet new bonsaienv Tip If you get an error during this step which says, Setup.ps1 cannot be loaded because running scripts is disabled, you need to allow powershell scripts to be executed by users. To do this, you can change the global execution policy by opening a new powershell instance with Run as Administrator and use the following command: set-executionpolicy remotesigned Alternatively, you can use the Setup.cmd file to setup the bonsai environment without changing the execution policy globally. Run the file by going to the terminal and running: .\\.bonsai\\Setup.cmd Python Environment Setup Guide Activate the python environment .\\.venv\\Scripts\\activate Install the lds_python package pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c If you encounter errors during installation of the lds_python package, you will have to diagnose the issue and install the correct package dependencies manually. Check that the lds_python package has been installed correctly. Launch a python IDE: python Check that you can correctly import the package: import lds If no errors appear when import lds is called in python, your python environment is ready. Exit python with the following command: exit() Move onto the next step. Bonsai Environment Setup Guide Launch bonsai: .bonsai\\Bonsai.exe Open Bonsai's Package Manager from the startup menu and install the Bonsai.ML.LinearDynamicalSystems bonsai package from the menu. When installing the package, make sure to enter Accept on the prompts when asked to accept Terms and Conditions during installation. You will now have access to Bonsai.ML.LinearDynamicalSystems modules from the Bonsai toolbox. If all of these steps worked for you, head to the section on Getting Started."
  },
  "articles/LinearDynamicalSystems/lds-overview.html": {
    "href": "articles/LinearDynamicalSystems/lds-overview.html",
    "title": "Overview | Bonsai.ML",
    "keywords": "Overview The LinearDynamicalSystems package provides a Bonsai interface to interact with the lds_python package. General Guide Since the package relies on Bonsai and python, both Bonsai and Python installation steps are required. We provide detailed instructions for installing the package in a new environment, for example when adding the package to existing workflows, and seperately provide documentation for how to install/run examples which can be bootstrapped directly from the example folder. To install the package for integrating with existing workflows, see the Installation Guide - Windows or the Installation Guide - Linux sections for more information. To head directly to integrating the package into workflows, see the Getting Started section. To test the specific examples provided, check out the Examples tab."
  },
  "bonsai/README.html": {
    "href": "bonsai/README.html",
    "title": "docfx-tools | Bonsai.ML",
    "keywords": "docfx-tools A docfx template for package documentation, patching the modern template to provide stylesheets and scripts for rendering custom workflow containers with copy functionality. How to use To include this template in a docfx website, first clone this repository as a submodule: git submodule add https://github.com/bonsai-rx/docfx-tools bonsai Then modify docfx.json to include the template immediately after the modern template: \"template\": [ \"default\", \"modern\", \"bonsai/template\", \"template\" ], Finally, import and call the modules inside your website template/public folder. main.css @import \"workflow.css\"; main.js import WorkflowContainer from \"./workflow.js\" export default { start: () => { WorkflowContainer.init(); } } Powershell Scripts This repository also provides helper scripts to automate several content generation steps for package documentation websites. Exporting workflow images Exporting SVG images for all example workflows can be automated by placing all .bonsai files in a workflows folder and calling the below script pointing to the bin directory to include. A bonsai environment is assumed to be available in the .bonsai folder in the repository root. .\\modules\\Export-Image.ps1 \"..\\src\\PackageName\\bin\\Release\\net472\""
  },
  "examples/README.html": {
    "href": "examples/README.html",
    "title": "Bonsai.ML - Examples | Bonsai.ML",
    "keywords": "Bonsai.ML - Examples The Bonsai.ML project is a collection of packages built to target the Bonsai-Rx ecosystem, providing reactive infrastructure for machine learning operations. In the Bonsai.ML - Examples repo, we provide example workflows, datasets, and demos for how to get started using the suite of Bonsai.ML packages that are currently available. We provide documentation for each example to illustrate how Bonsai.ML can be incorporated into Bonsai workflows. For each Bonsai.ML package, check out the Getting Started page to learn more about how to run the example workflows yourself. Datasets All of the datasets used in these examples can be found by going to: https://doi.org/10.5281/zenodo.10629221. ZebrafishExampleVid.avi - provided by Nicholas Guilbeault in the Thiele lab at the University of Toronto. If you would like to refer to this data, please cite Guilbeault, N.C., Guerguiev, J., Martin, M. et al. (2021). BonZeb: open-source, modular software tools for high-resolution zebrafish tracking and analysis. Scientific Reports 11, 8148, https://doi.org/10.1038/s41598-021-85896-x. ForagingMouseExampleVid.avi - provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 ReceptiveFieldSimpleCell.zip - provided by the authors of \"Touryan, J., Felsen, G., & Dan, Y. (2005). Spatial structure of complex cell receptive fields measured with natural images. Neuron, 45(5), 781-791.\" https://doi.org/10.1016/j.neuron.2005.01.029 Acknowledgements Development of this package was supported by funding from the Biotechnology and Biological Sciences Research Council [grant number BB/W019132/1]."
  },
  "examples/examples/HiddenMarkovModels/InferringBehavioralStateFromKinematics/README.html": {
    "href": "examples/examples/HiddenMarkovModels/InferringBehavioralStateFromKinematics/README.html",
    "title": "Inferring Behavioral State From Kinematics Example | Bonsai.ML",
    "keywords": "Inferring Behavioral State From Kinematics Example The code for this repo can be found here. In the following example, you can see how the Hidden Markov Model (HMM) can be used to infer the underlying hidden state of a mouse that is freely moving and foraging in an open field arena. Dependencies If you used the bootstrapping method, you don't have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - Expression Scripting v2.8.0 Bonsai - Gui v0.1.0 Bonsai - ML Hidden Markov Models v0.2.0 Bonsai - ML Linear Dynamical Systems v0.2.0 Bonsai - ML Visualizers Hidden Markov Models v0.2.0 Bonsai - ML Visualizers Linear Dynamical Systems v0.2.0 Bonsai - Numerics v0.9.0 Warning This example builds on the LDS Kinematics Foraging Mouse example and requires both the Bonsai.ML.LinearDynamicalSystems package and the Bonsai.ML.HiddenMarkovModels package. See the installation guide to ensure both packages are installed and working correctly. Workflow Below is the workflow. In this example, a Hidden Markov Model (HMM) is used to infer the hidden behavioral state of a foraging mouse. The workflow creates a python runtime (CreateRuntime), and then loads both the HMM module (LoadHMMModule) and the LDS module (LoadLDSModule). The MouseTracking group workflow performs image processing to calculate the mouse's Centroid position. The Centroid is used with InputMapping to initialize a Kalman Filter (KF) Kinematics model (CreateKFModel) with the initial parameters Position_x0 and Position_y0 set to the X and Y values of the Centroid. We set the other parameters of the KF model to be the parameters that we think will best track the animal, though these parameters can also be learned online see the ModelOptimizationForagingMouse example. We are going to use the absolute velocity and acceleration of the animal as observations to the HMM model. We are going to use 6 hidden states for our model. When we initialize our HMM using the CreateHMM node, we set the Dimensions to 2, for the number of features of our observations, and the NumStates to 6, for the number of hidden behavioral states. The Observations and Transitions parameters will be left to their default values, Gaussian and Stationary, respectively. Inside of the PerformKFInference node, the Centroid is passed to the Kalman Filter model to PerformInference. The KF model takes the centroid position and infers the full KinematicState (Position, Velocity, and Acceleration for both X and Y dimensions). We perform FeatureExtraction on the KinematicState to transform the full KinematicState into just the absolute velocity and acceleration of the animal, giving us our HMMObservation. The WithLatestFrom node allows us to control when the HMM will start performing state inference when the HMMFitFinished node has emitted a value. The HMMObservations are fed to the HMM model to asynchronously fit the HMM to the data (RunFitAsync). This process takes some time for observations to accumulate and for the model fitting process to complete. The procedure waits for 1000 observations to be received before fitting to the batch of data. Once the batch has been filled, the model will begin the fitting procedure, and the workflow enters the CheckFitFinished state to test periodically whether or not the HMM fitting procedure has completed. Once completed, the sequence completes with Take, and an event is emitted to the HMMFitFinished node. Once the HMMFitFinished node emits a value, the WithLatestFrom node emits a value and the workflow enters the InferHMMState node. Inside of this node, the HMM model infers the probability of being in each state given the last HMMObservation, which gets passed to the HMMStateProbabilities. The BehavioralStateVisualizer group node displays a table of visualizers. The left image shows the original video of the freely moving mouse, along with the KF model's inferred X and Y position. In the middle, the KinematicState is shown as a 3x2 table layout panel, representing the inferred position, velocity, and acceleration along the X and Y dimensions. The graph on the right initially shows nothing, since during the first minute or so the HMM model is accumulating data in a batch. When the batch is full, the model fits to the data and begins running online inference of behavioral state. At this point, the graph will show the state probabilities given the latest observation. This is how it looks:"
  },
  "examples/examples/HiddenMarkovModels/README.html": {
    "href": "examples/examples/HiddenMarkovModels/README.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started In general, when using the HiddenMarkovModels package, you need to configure your Bonsai workflow to run the correct python environment which has the ssm package installed. If you followed the installation guide, you will have a basic Bonsai-python environment for using the LinearDynamicalSystems package. You will also have installed the basic dependencies required to build and run the Bonsai workflows. However, if you wish to run the examples, we highly recommend following this guide to create and configure the environments needed for each example. This guide has been made for users starting from scratch to get started. Alternatively, you can use the environment you created in the previous guide and install the necessary package dependencies required to run each workflow. All of the examples are self-contained and can be found by going to the Bonsai.ML - Examples repo. For each example, you can bootstrap the python and Bonsai environments from within each example directory. Below, we demonstrate how to get started using the examples by bootstrapping the example environments that are needed to run the example workflow. Windows Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) Note: python must be installed using the windows installer and must be added to the system PATH Git Instructions Open the terminal or powershell. Start by cloning the Bonsai.ML - Examples repo with: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples: cd .\\machinelearning-examples\\examples\\HiddenMarkovModels\\ForagingMouse To create the python virtual environment and install the package, run the following: python -m venv .venv .\\.venv\\Scripts\\activate pip install numpy cython pip install ssm@git+https://github.com/lindermanlab/ssm@6c856ad3967941d176eb348bcd490cfaaa08ba60 Warning If you have compatibility issues with the latest version of numpy (v2.0), try the following: pip install numpy==1.26.4 To create the bonsai environment and install the packages, run the powershell script: cd .bonsai powershell .\\Setup.ps1 Once installed, run the bonsai executable with: .\\Bonsai.exe Open the workflow example and start the bonsai workflow. Linux Notes on Running Bonsai in Linux Currently, the examples have only been tested on Ubuntu 22.04. Running Bonsai on Linux is still being tested and should be used with caution. We cannot guarantee that these instructions will work for all Linux distributions or versions. It is important that you consult the general Bonsai installation guide on Linux to ensure that the underlying Bonsai package dependencies are met and installed properly. Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) comes installed with the latest version of Ubuntu 22.04 Git Mono OpenCV and OpenGL binaries Instructions Open up a terminal and start by cloning the Bonsai.ML - Examples repo: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples. For instance: cd machinelearning-examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData Create the python virtual environment and install the lds python package with the following: python3 -m venv .venv source .venv/bin/activate pip install numpy cython pip install ssm@git+https://github.com/lindermanlab/ssm@6c856ad3967941d176eb348bcd490cfaaa08ba60 Warning The latest version of numpy (v2.0) is incompatible with the ssm package. To install the latest compatible version of numpy, use: pip install numpy==1.26.4 Run the Setup.sh script using the following: cd .bonsai ./Setup.sh Tip The Setup.sh script uses the xmllint and xmlstarlet packages to convert the assembly location paths in the bonsai config file from Windows to Linux paths. If you do not have these packages already installed on your computer, you can install the xmllint and the xmlstarlet packages using: sudo apt install -y libxml2-utils xmlstarlet Once the bonsai environment has been created, activate the bonsai environment and run the Bonsai executable: source ./activate bonsai Tip If your desktop theme is set to dark mode, the Bonsai GUI can display in weird ways due to the way that mono tries to use the desktop theme in applications. If you use the bonsai-clean command instead of the bonsai command, this will reset the theme that mono uses to the default theme, which can imporove the appearance of the Bonsai GUI. Open the workflow example and start the bonsai workflow."
  },
  "examples/examples/HiddenMarkovModels/SimulatedData/README.html": {
    "href": "examples/examples/HiddenMarkovModels/SimulatedData/README.html",
    "title": "Simulated Data Example | Bonsai.ML",
    "keywords": "Simulated Data Example The code for this repo can be found here. In the following example, you can see how the Hidden Markov Model (HMM) can be used to infer the underlying hidden state of a system producing observations from two distinct multivariate distributions. Dependencies If you used the bootstrapping method, you don't have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - Gui Zedgraph v0.1.1 Bonsai - ML v0.2.0 Bonsai - ML Hidden Markov Models v0.2.0 Bonsai - ML Visualizers Hidden Markov Models v0.2.0 Bonsai - Numerics v0.9.0 Bonsai - Scripting Python v0.2.0 Workflow Below is the workflow. In this example, a Hidden Markov Model (HMM) is used to infer the hidden state of a simulated system. The workflow creates a python runtime (CreateRuntime), loads the HMM module (LoadHMMModule), and then initializes an HMM model with two states (CreateHMM). The simulation, encapsulated by a group workflow (SimulatedDataWith2States), generates data from two distinct multivariate normal distributions. The distribution that the simulation draws samples from switches at a specified rate. These Data are then formatted into a string representation of a python list, and subsequently fed as Observations to the HMM model. The HMM model performs inference of the hidden state (InferState) given the observation. When the HMM model is created, the parameters are not yet fit to the data. After 80 data points, the mini batch of data is sent to the model to be fit to the data (RunFitAsync). Once the fitting procedure completes asynchronously, the model's parameters will be better tuned to the system, and the model begins performing inferrence of the state of the simulated system. To visualize this, the SimulationVisualizer group node displays two graphs. On the left, the X and Y data samples are plotted as individual points in the scatter plot. After a few samples, you should start to see two distinct clusters emerge. On the right, you will see the inferred state of the model, represented as the probability of being in a particular state. After the model has been fit, you should see that the inferred state aligns with the cluster that data samples are being drawn from. This is how it should look:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ForagingMouse/README.html",
    "title": "Foraging Mouse Example | Bonsai.ML",
    "keywords": "Foraging Mouse Example The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to infer the kinematics of a mouse behaving in a foraging arena. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow Below is the workflow for inferring kinematics of a mouse during a foraging task. In this example, a Kalman Filter is used to infer the position, velocity, and acceleration of the freely moving mouse. The frames per second of the video is 50 Hz, so we set the Fps property of the CreateKFModel node to 50. The workflow performs centroid tracking inside of the MouseTracking group node, which uses a standard image analysis pipeline to extract the Centroid of the animal. The Centroid data is then converted into a type of Observation2D that the model then uses to perform inference using the PerformInference node. Since the tracking pipeline takes some time to initialize, we wait to create the kalman filter using the SubscribeWhen node only once TrackingStarted has produced a value, which is conditioned on centroid != NaN. To visualize the inferred position, velocity, and acceleration kinematics, the MouseKinematicsVisualizer node positioned at the bottom of the workflow can be openned while the workflow is running. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see the video playing with the tracking data (blue) and inferred position (red) overlaid. The workflow should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ForecastingForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ForecastingForagingMouse/README.html",
    "title": "Forecasting Foraging Mouse Example | Bonsai.ML",
    "keywords": "Forecasting Foraging Mouse Example The code for this repo can be found here. In the following example, you can see how the Kalman Filter can be use to forecast the future kinematics of a mouse behaving in a foraging arena. This example is an extension to the Foraging Mouse example with the addition of performing forecasting. Dependencies If you used the environment bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.2.0 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow The workflow is similar to the workflow used to infer the kinematics of a mouse during foraging (see example here)[https://github.com/bonsai-rx/machinelearning-examples/tree/main/examples/LinearDynamicalSystems/Kinematics/ForagingMouse] with the addition of a few nodes to forecast the future kinematics of the mouse. You can find specific information about the tracking workflow and model inference workflow by going to the Foraging Mouse example. In addition to the tracking workflow and model inference, only a few nodes are needed to perform optimization of the models parameters. Following the PerformInference node, which sends notifications to the InferredKinematics subject, the PerformForecasting node is used to make predictions about the kinematics of the mouse for a certain number of steps into the future, defined by the Timesteps property. The output of PerformForecasting is a type of Forecast, which contains a list of ForecastResult corresponding the predicted KinematicState at each timestep. The Forecast can be visualized alongside the existing data by opening up the ForecastVisualizer group node, like so:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ModelOptimizationForagingMouse/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ModelOptimizationForagingMouse/README.html",
    "title": "Optimizing Model Parameters for Foraging Mouse Example | Bonsai.ML",
    "keywords": "Optimizing Model Parameters for Foraging Mouse Example The code for this repo can be found here. In the following example, you can see how the parameters of the Kalman Filter can be automatically optimized to infer the kinematics of a mouse behaving in a foraging arena. This example is an extension to the Foraging Mouse example in which the parameters of the model are optimized by learning the parameters of the model over small batches of training data. Dependencies If you used the environment bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.2.0 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video for this example was generously provided by the Sainsbury Wellcome Centre Foraging Behaviour Working Group. (2023). Aeon: An open-source platform to study the neural basis of ethological behaviours over naturalistic timescales, https://doi.org/10.5281/zenodo.8413142 You can download the ForagingMouseExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the MouseTracking group node to point to the correct location. Workflow Below is the workflow. It is similar to the workflow that was used to infer the kinematics of a mouse during foraging (see example here)[https://github.com/bonsai-rx/machinelearning-examples/tree/main/examples/LinearDynamicalSystems/Kinematics/ForagingMouse] with the addition of a few nodes that will run optimization of the models parameters over small batches of data that are collected continuously. You can find specific information about the tracking workflow and model inference workflow by going to the Foraging Mouse example. In addition to the tracking workflow and model inference, only a few nodes are needed to perform optimization of the models parameters. There is a specific branch of the workflow where the Observation subject is subscribed to after the ModelParams fires, and gets passed to a RunOptimization node. This node has a number of properties which me be useful, such as the batch size of the training data, which parameters to optimize, etc. Once the data buffer is full, the model runs optimization asynchronously. You should see in the beginning that the model will tend to overshoot the position of the mouse, since the parameters are not well adjusted. Over time, the output of the model will improve and the inference of the model will more closely track the position of the mouse with multiple learning iterations. The easiest way to observe the effects that optimizing the models parameters has on the models output is to compare the outputs between a model that undergoes optimization and an identical model that retains its initial parameters. With each iteration, the optimized model will diverge from the unoptimized model and more closely track the position of the mouse. This is what you would see:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData/README.html",
    "title": "Simulated Data | Bonsai.ML",
    "keywords": "Simulated Data The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used for kinematic inference using simulated data. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Numerics v0.9.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - System v2.8.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.0 Workflow Below is the workflow for running the Kalman Filter Kinematics model on simulated data. In this example, we created a Kalman Filter for infering kinematics from simulated data. We created a property called SamplingFrequency which dictates both the time step parameter of our model and also determines the rate at which the new simulated data values are generated. At each time step, the Timer inside the SimulatedData group workflow emits a new value which increments by 1. This value is then transformed by the Sin and Cos functions to generate points along the circumference of a circle. Noise is added to the values by sampling from a normal distribution and the output of this gets scaled and transformed to map onto pixel coordinates in an image of size 500 x 500. These values are then converted into observations that are then passed to the model to perform inference. To see the inferred kinematics of the model, double click on the SimulatedDataVisualizer node at the bottom of the workflow while it is running to open up the visualizer. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see an image representing the location of each new observation (blue) along with the inferred position of the model over time (red). The window should look similar to this:"
  },
  "examples/examples/LinearDynamicalSystems/Kinematics/ZebrafishCentroidTracking/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/Kinematics/ZebrafishCentroidTracking/README.html",
    "title": "Zebrafish Centroid Tracking | Bonsai.ML",
    "keywords": "Zebrafish Centroid Tracking The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to infer the kinematics of a freely swimming juvenille zebrafish. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - Core v2.8.1 Bonsai - Design v2.8.0 Bonsai - Editor v2.8.0 Bonsai - ML v0.1.0 Bonsai - ML LinearDynamicalSystems v0.1.0 Bonsai - ML Visualizers v0.1.0 Bonsai - Scripting v2.8.0 Bonsai - Scripting Python v0.2.0 Bonsai - Vision v2.8.1 Bonsai - Vision Design v2.8.1 Dataset The video in this dataset was provided by Nicholas Guilbeault in the Thiele lab at the University of Toronto and published as part of Guilbeault, N.C., Guerguiev, J., Martin, M. et al. BonZeb: open-source, modular software tools for high-resolution zebrafish tracking and analysis. Sci Rep 11, 8148 (2021). https://doi.org/10.1038/s41598-021-85896-x. You can download the ZebrafishExampleVid.avi video file here: https://doi.org/10.5281/zenodo.10629221. The workflow expects the video to be placed into the datasets folder but if you prefer to keep the video elsewhere, simply change the Filename property of the ZebrafishTracking group node to point to the correct location. Workflow Below is the workflow for inferring kinematics of zebrafish swimming. In this example, a Kalman Filter is used to infer the position, velocity, and acceleration of a freely swimming zebrafish. The original video was collected at 200 Hz, so the Fps property of the CreateKFModel node is set to 200. The workflow works by performing centroid tracking inside of the ZebrafishTracking node, which performs image analyses to extract the Centroid of the zebrafish. The Centroid data is then converted into a type of Observation2D that the model then uses to perform inference using the PerformInference node. Since the tracking pipeline takes some time to initialize, we wait to create the kalman filter using the SubscribeWhen node only once TrackingStarted has produced a value, which is conditioned on centroid != NaN. To visualize the inferred position, velocity, and acceleration kinematics, double click on the ZebrafishKinematicsVisualizer node at the bottom of the workflow while it is running to open up the visualizer. On the left, you should see the inferred position, velocity and acceleration (top to bottom), with the ability to select which state component (X or Y) you want to visualize from the dropdown menu on the top right corner of the graph. Both the mean (dark blue) and variance (light blue shading) of the inferred state component are visualized. On the right, you should see the video of the zebrafish playing, with the original tracking data (blue) and inferred position (red) overlaid. The window should look similar to this:"
  },
  "examples/examples/LinearDynamicalSystems/LinearRegression/ReceptiveFieldSimpleCell/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/LinearRegression/ReceptiveFieldSimpleCell/README.html",
    "title": "Receptive Field Simple Cell | Bonsai.ML",
    "keywords": "Receptive Field Simple Cell The code for this repo can be found here. In the following example, you can find how the Kalman Filter can be used to estimate the linear receptive field of a simple cell recorded from V1 of an anaesthetised cat. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - System v2.8.1 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Dataset The data for this example was generously provided by the authors of \"Touryan, J., Felsen, G., & Dan, Y. (2005). Spatial structure of complex cell receptive fields measured with natural images. Neuron, 45(5), 781-791.\" You can download the ReceptiveFieldSimpleCell.zip dataset here: https://doi.org/10.5281/zenodo.10629221. It consists of 2 csv files: one which contains the all 144 pixel values of the 12 x 12 images for each timepoint, and one which contains the binned spike counts for a single neuron. Once downloaded, you will need to extract the contents of the zip file into the datasets folder. Workflow Below is the example workflow for how to perform online estimation of the receptive field of a simple visual neuron. In the workflow, we use previously acquired data and read the values sequentially, but this workflow can easily be adapted to real-time stimulus presentation and online neural recording. In this example, a Kalman Filter is used to estimate the receptive field using Bayesian inference. It receives the pixel values, represented by a flattened array of the 2D visual stimulus, and infers the response of the neuron. In the images.csv file, there are 144 columns. These columns represent the pixel values of the stimulus that was displayed (a 12 x 12 image for a total of 144 pixels). The neuron's binned spike count is recorded in response to each image. These responses are recorded in the responses.csv file. In the LoadData group node, we read in the values from each csv file and zip them together. We add an additional feature to the image observations to represent our model's intercept. This is done when we convert the images csv data to a list in the Format node inside the LoadData group node. Since we are loading all of our data at once, we store the data inside of a ReplaySubject which will represent our observation of data. In the CreateKFModel node, we specify the number of features that will be used observed at each time step. This number is set to the total number of pixels in our image (144 total) plus an additional feature that is used to represent the model intercept. We then specify the coefficients for our precision of the likelihood and the prior. We wait for the model to initialize and then subscribe to the data observations using the SubscribeWhen node. As the workflow runs, the model will perform bayesian inference to learn the visual features that the neuron responds strongly too. The neurons receptive field can then be visualized as the models state parameters evolving through time. To visualize the neurons receptive field, double click on the ReceptiveFieldSimpleCell node at the bottom of the workflow while it is running. You should see a heatmap visualization of the receptive field. You can interact with this heatmap by left clicking to read the values at each pixel, right click to pan the image, or use the scroll wheel to zoom in/out. When you right click, you will see several options appear at the bottom of the visualizer's window where you can change the color palette and render method online. You can reset the plot to the original view by holding Ctrl and double right-click. The window should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/LinearRegression/SimulatedData/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/LinearRegression/SimulatedData/README.html",
    "title": "Simulated Data | Bonsai.ML",
    "keywords": "Simulated Data The code for this repo can be found here. In the following example, you will see how the Kalman Filter can be used to perform Bayesian linear regression to estimate the parameters of a simple linear model with some added gaussian noise. Dependencies If you used the bootstrapping method, you dont have to worry about the package dependencies, as these should be already installed. However, if creating a new environment or integrating into an existing one, you will need to install the following packages: Bonsai - System v2.8.1 Bonsai - ML LinearDynamicalSystems v0.2.0 Bonsai - ML Visualizers v0.2.0 Workflow Below is the example workflow for how to perform bayesian linear regression with noisy data generated from a simple linear model. We use a linear model to generate simulated data. The linear model takes the form: \\[ Y_t = \\beta_0 + \\beta_1 X_t + \\epsilon_t \\] In the SimulatedData group node, we define the parameters of the linear model that are used to generate our data. We evaluate our linear model by passing in values of x, which are randomly selected from a uniform distribution. We then generate a noisy observation by taking the output of the model and adding some noise to the data by randomly sampling from a normal distribution. In the CreateKFModel node, we specify the number of features that will be included in our observations at each time step. Since our model has 2 parameters, we set the number of features to 2. We then specify the coefficients for our precision of the likelihood and the prior. We wait for the model to initialize and then subscribe to the data observations using the SubscribeWhen node. As the workflow runs, the model will perform inference to learn the parameters of the underlying linear model used to generate the simuated data. We can then visualize the posterior of the model by creating a multivariate distribution over parameter space that covers a range of values around the true parameters of our linear model. To visualize the multivariate distribution, double click on the CreateMultivariatePDF node at the bottom of the workflow while it is running. You should see a heatmap visualization of the multivariate distribution. You can interact with this heatmap by left clicking to read the values at each pixel, right click to pan the image, or use the scroll wheel to zoom in/out. When you right click, you will see several options appear at the bottom of the visualizer's window where you can change the color palette and render method online. You can reset the plot to the original view by holding Ctrl and double right-click. The window should look like this:"
  },
  "examples/examples/LinearDynamicalSystems/README.html": {
    "href": "examples/examples/LinearDynamicalSystems/README.html",
    "title": "Getting Started | Bonsai.ML",
    "keywords": "Getting Started In general, when using the LinearDynamicalSystems package, you need to configure your Bonsai workflow to run the correct python environment which has the lds_python package installed. If you followed the installation guide, you will have a basic Bonsai-python environment for using the LinearDynamicalSystems package. You will also have installed the basic dependencies required to build and run the Bonsai workflows. However, if you wish to run the examples, we highly recommend following this guide to create and configure the environments needed for each example. This guide has been made for users starting from scratch to get started. Alternatively, you can use the environment you created in the previous guide and install the necessary package dependencies required to run each workflow. All of the examples are self-contained and can be found by going to the Bonsai.ML - Examples repo. For each example, you can bootstrap the python and Bonsai environments from within each example directory. Below, we demonstrate how to get started using the examples by bootstrapping the example environments that are needed to run the example workflow. Windows Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) Note: python must be installed using the windows installer and must be added to the system PATH Git Microsoft Visual C++ Redistributable Tip When running windows in a virtual machine, it is necessary to install the OpenGL mesa drivers on the windows VM. You can read more about it here Instructions Open the terminal or powershell. Start by cloning the Bonsai.ML - Examples repo with: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples. For instance, this will bring you to the simulated data example from the LinearDynamicalSystems.Kinematics package: cd .\\machinelearning-examples\\examples\\LinearDynamicalSystems\\Kinematics\\SimulatedData To create the python virtual environment and install the package, run the following: python -m venv .venv .\\.venv\\Scripts\\activate pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c Tip If you get an error during this step, you need to make sure that scripts are executable from the terminal. To do this, open a powershell terminal using Run as Administrator and enter this line, followed by yes: set-executionpolicy remotesigned To create the bonsai environment and install the packages, run the powershell script: cd .bonsai powershell .\\Setup.ps1 Once installed, run the bonsai executable with: .\\Bonsai.exe Open the workflow example and start the bonsai workflow. Linux Notes on Running Bonsai in Linux Currently, the examples have only been tested on Ubuntu 22.04. Running Bonsai on Linux is still being tested and should be used with caution. We cannot guarantee that these instructions will work for all Linux distributions or versions. It is important that you consult the general Bonsai installation guide on Linux to ensure that the underlying Bonsai package dependencies are met and installed properly. Dependencies You must have the following installed on your PC in order to run the example workflows: Python (v3.10) comes installed with the latest version of Ubuntu 22.04 Git Mono OpenCV and OpenGL binaries Tip For installing OpenCV, the simplest method is to follow the instructions on installing OpenCV from pre-built binaries Instructions Open up a terminal and start by cloning the Bonsai.ML - Examples repo: git clone https://github.com/bonsai-rx/machinelearning-examples.git Change directory to one of the examples. For instance: cd machinelearning-examples/examples/LinearDynamicalSystems/Kinematics/SimulatedData Create the python virtual environment and install the lds python package with the following: python3 -m venv .venv source .venv/bin/activate pip install lds_python@git+https://github.com/joacorapela/lds_python@f761c201f3df883503ecb67acef35ba846e3524c Tip If you get an error during this step, it may be because you need to install python virtual environment package on your system. You can do so using the following: sudo apt install -y python3.10-venv Run the Setup.sh script using the following: cd .bonsai ./Setup.sh Tip The Setup.sh script uses the xmllint and xmlstarlet packages to convert the assembly location paths in the bonsai config file from Windows to Linux paths. If you do not have these packages already installed on your computer, you can install the xmllint and the xmlstarlet packages using: sudo apt install -y libxml2-utils xmlstarlet Once the bonsai environment has been created, activate the bonsai environment and run the Bonsai executable: source ./activate bonsai Tip If your desktop theme is set to dark mode, the Bonsai GUI can display in weird ways due to the way that mono tries to use the desktop theme in applications. If you use the bonsai-clean command instead of the bonsai command, this will reset the theme that mono uses to the default theme, which can imporove the appearance of the Bonsai GUI. Open the workflow example and start the bonsai workflow."
  },
  "index.html": {
    "href": "index.html",
    "title": "Bonsai - Machine Learning | Bonsai.ML",
    "keywords": "Bonsai - Machine Learning The Bonsai.ML project is a collection of packages designed to integrate machine learning algorithms with Bonsai. This document provides an overview of the available packages and their functionalities. Core Packages Bonsai.ML Provides common tools and functionality. Bonsai.ML.Design Provides common tools and functionality for visualizers and editor features. Bonsai.ML.Data Provides common tools and functionality for working with data. Bonsai.ML.Python Provides common tools and functionality for C# packages to interface with Python. Available Packages Bonsai.ML.LinearDynamicalSystems Facilitates inference using linear dynamical systems (LDS). It interfaces with the lds_python package using the Bonsai - Python Scripting library. Bonsai.ML.LinearDynamicalSystems.Kinematics Supports the use of the Kalman Filter for inferring kinematic data. Bonsai.ML.LinearDynamicalSystems.LinearRegression Utilizes the Kalman Filter to perform online Bayesian linear regression. Bonsai.ML.LinearDynamicalSystems.Design Visualizers and editor features for the LinearDynamicalSystems package. Bonsai.ML.HiddenMarkovModels Facilitates inference using Hidden Markov Models (HMMs). It interfaces with the ssm package using the Bonsai - Python Scripting library. Bonsai.ML.HiddenMarkovModels.Observations Provides functionality for specifying different types of observations. Bonsai.ML.HiddenMarkovModels.Transitions Provides functionality for specifying different types of transition models. Bonsai.ML.HiddenMarkovModels.Design Visualizers and editor features for the HiddenMarkovModels package. Note Bonsai.ML packages can be installed through Bonsai's integrated package manager and are generally ready for immediate use. However, some packages may require additional installation steps. Refer to the specific package section for detailed installation guides and documentation. Acknowledgments Development of the Bonsai.ML package is supported by the Biotechnology and Biological Sciences Research Council [grant number BB/W019132/1]."
  }
}